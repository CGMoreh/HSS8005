[
  {
    "objectID": "materials/worksheets/worksheets_w02.html",
    "href": "materials/worksheets/worksheets_w02.html",
    "title": "Week 2 Lab Exercises",
    "section": "",
    "text": "This session introduces simple and multiple linear regression models. You will be working with data from Österman (2021) to replicate parts their analysis. We will be covering only basic regression methods in this session, so the article will serve mainly as a broad background to the data here. We will be returning to this article in future weeks too, expanding our modelling strategy as we discover new methods. We will also practice some data management tasks and the basics of data visualisation using principles from ‘the grammar of graphics’ as implemented in the {ggplot2} package (see Kieran Healy’s Data Visualization: A practical introduction for an introduction with many practical examples).\nBy the end of the session, you will:\n\nlearn how to import data from foreign formats (e.g. SPSS, Stata, CSV)\nknow how to perform basic descriptive statistics on a dataset\nunderstand the basics of data visualisation\nknow how to fit linear regression models in R using different functions\nlearn a few options for presenting findings from regression models\n\nDownload the exercise sheet",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#aims",
    "href": "materials/worksheets/worksheets_w02.html#aims",
    "title": "Week 2 Lab Exercises",
    "section": "",
    "text": "This session introduces simple and multiple linear regression models. You will be working with data from Österman (2021) to replicate parts their analysis. We will be covering only basic regression methods in this session, so the article will serve mainly as a broad background to the data here. We will be returning to this article in future weeks too, expanding our modelling strategy as we discover new methods. We will also practice some data management tasks and the basics of data visualisation using principles from ‘the grammar of graphics’ as implemented in the {ggplot2} package (see Kieran Healy’s Data Visualization: A practical introduction for an introduction with many practical examples).\nBy the end of the session, you will:\n\nlearn how to import data from foreign formats (e.g. SPSS, Stata, CSV)\nknow how to perform basic descriptive statistics on a dataset\nunderstand the basics of data visualisation\nknow how to fit linear regression models in R using different functions\nlearn a few options for presenting findings from regression models\n\nDownload the exercise sheet",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#setup",
    "href": "materials/worksheets/worksheets_w02.html#setup",
    "title": "Week 2 Lab Exercises",
    "section": "Setup",
    "text": "Setup\nIn Week 1 you set up R and RStudio, and an RProject folder (we called it “HSS8005_labs”) with an .R script and a .qmd or .Rmd document in it (we called these “Lab_1”). Ideally, you saved this on a cloud drive so you can access it from any computer (e.g. OneDrive). You will be working in this folder. If it’s missing, complete Exercise 3 from the Week 1 Worksheet.\nYou can create a new .R script and .qmd/.Rmd for this week’s work (e.g. “Lab_2”). Start working in the .R script initially, then switch to .qmd/.Rmd later in the session to report on your final analysis.",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-1-load-and-install-r-packages-needed-for-this-lab",
    "href": "materials/worksheets/worksheets_w02.html#exercise-1-load-and-install-r-packages-needed-for-this-lab",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 1: Load (and install) R packages needed for this lab",
    "text": "Exercise 1: Load (and install) R packages needed for this lab\nUsing function we have learnt in Week 1, load (and install, if needed) the following R packages:\n\ntidyverse\neasystats\ngtsummary\nggformula\nsjlabelled",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-2-import-external-data",
    "href": "materials/worksheets/worksheets_w02.html#exercise-2-import-external-data",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 2: Import external data",
    "text": "Exercise 2: Import external data\nAs we have seen in Week 1, small datasets that are included in R packages (including base R) for demonstration purposes can be used by simply invoking the name of the dataset. For example, the command head(mtcars) would print out the first six rows (cases) in the “mtcars” dataset included in base R (more specifically, in its “datasets” package). To access a dataset from a non-base-R package, the process is similar, however, we need to ensure that the package is installed on our system and that we specify the name of the package; for example, to access the starwars dataset (which contains all sorts of information about the characters of Star Wars films), we need to make sure that dplyr - or the whole tidyverse - is installed:\n\nhead(starwars) # gives an Error\n\nhead(dplyr::starwars) # works, as long as {dplyr} or the whole {tidyverse} are installed\n\nReal-life datasets, however, need to be imported into R. Datasets come in various formats. R’s native data format has the extension .rds and can be imported with the readRDS() function. The counterpart function saveRDS() exports a dataset to the .rds format. The core-tidyverse {readr} package has similar functions (read_rds() / write_rds()).\nThe .rds format is useful because it can be compressed to various sizes to take up less space, but can only be directly opened in R. It is much more common to encounter data saved in a “delimited” text format, which can be easily opened in a spreadsheet viewer/editor such as Excel. This makes it very interchangeable and therefore very common. The most common is probably the “comma separated values” (.csv) format, which can be imported with the base-R function read.csv() or the tidyverse readr::read_csv() equivalent. Read Chapter 11 in R4DS for more on these functions.\nVery often, you will need to import data saved in the format of another proprietary statistical analysis package such as SPSS or Stata. Large survey projects usually make data available in these formats. The great advantage of these formats is that they can incorporate additional information about variables and the levels of categorical variables (e.g. value labels, specific values for different types of missing values). These additional information can be extremely valuable, but they are not handled straight-forwardly in text-based format, spreadsheets and R’s native data format. To make them operational in R, we need a few specially designed functions.\nThe {haven} package — part of the extended {tidyverse}, meaning that it is installed on your system as part of {tidyverse}, but the library(\"tidyverse\") command does not load it by default; it needs to be loaded explicitly — is one of the most commonly used for this purpose. Functions such as read_sas(), read_sav() and read_dta() import datasets specific to the SAS, SPSS and Stata programs, respectively.\nIt is highly recommended to read the documentation available for the {haven} package to understand how it operates. Fundamentally, it is designed to import data to a intermediary format which stores the additional labelling information in a special format that allows users to access them, but not making them easy to use directly. A suite of packages developed by Daniel Lüdecke from the University of Hamburg offer some additional functionality to work with labels directly when summarising and plotting data. These packages integrate well with the {tidyverse} and are actively maintained, and we will use them in this course to make our lives a bit easier.\nIn a previous step, we have installed and loaded the {sjlabelled} package and the easystats suite of packages, which includes the datawizard package that contains a number of functions that make data(frame) manipulations easier.\nThe functions sjlabelled::read_sas(), sjlabelled::read_spss() and sjlabelled::read_stata() are the sjlabelled equivalents of the haven functions mentioned above. This vignette article included with the package explains the main differences between the two.\nThe more generic function data_read() from easystats’s datawizard package loads data from various formats based on the source files extension, including files from internet sources or compressed files. It relies on the rio package, which provides similar functionality.\n\n\n\n\n\n\nTip\n\n\n\nIt’s important to note that by default the data_read() function assumes that numeric variables where all values have a value label are categorical and will convert them into factors. That means that all the numeric “values” will be replaced by the “value labels” (e.g. 1=“Yes”/ 2=“No” will become simply “Yes”/“No”).\nThis is usually a reasonable default behaviour, because the majority of functions in R do not handle “value labels” and working with textual (character string) values can be more explicit.\nHowever, this may be less appropriate when the dataset contains many long ordered variables (such as 0-10 scale items), as we will most likely want to treat such variables as numeric in statistical models. To cancel this default behaviour, we can add the additional argument convert_factors = FALSE. This is also the format that gets imported when using readRDS().\nHowever, most of the common tabulation and graphing functions will not show the category “labels” in the output either, and for that purpose having variables “converted to factors” (with the original “Values” overwritten by the “Value labels”) may be a better option.\n\n\nAs a first step, let’s import the osterman dataset that underpins the Österman (2021) article (see the Data page on the course website for information about the datasets available in this course):\n\nosterman &lt;- datawizard::data_read(\"https://cgmoreh.github.io/HSS8005-data/osterman.dta\")",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-3-summarise-dataset-and-create-a-codebook",
    "href": "materials/worksheets/worksheets_w02.html#exercise-3-summarise-dataset-and-create-a-codebook",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 3: Summarise dataset and create a codebook",
    "text": "Exercise 3: Summarise dataset and create a codebook\n\nUsing functions learnt in Week 1, do the following:\n\ncheck the dimensions of the dataset; what does it tell you?\nprint a summary of the entire dataset; what have you learnt about the data?\n\n\nThere are various other options available for describing variables in different packages. For example, the describe_distribution() function from the datawizard package which is part of the easystats ecosystem that we already installed and loaded is useful for summarising numeric variables, while the data_tabulate() is useful for creating frequency tables of categorical variables.\nRun the commands below and inspect the outputs:\n\ndescribe_distribution(osterman)\n\nA very convenient way to create a codebook for a dataset – especially if it has value-labelled categorical variables – is offered by datawizard::data_codebook() function. The generated codebook describes the variables in the dataset and provides brief summary statistics. We can view this codebook in the RStudio Viewer, or we can save it as an html file. Codebooks are very useful for gaining an overview understanding of a large dataset.\nIn the command below we create an object storing the codebook; once it’s created, open the codebook in the Viewer and inspect it:\n\nosterman_codebook &lt;- data_codebook(osterman)\n\nWe can also generate and view the codebook interactively, without first saving it to an object:\n\ndata_codebook(osterman) |&gt; View()\n\n# or\n\nosterman |&gt; data_codebook() |&gt; View()\n\n# or\n\nView(data_codebook(osterman))\n\nThe result should be the following:\nProblem 1: Some issues when importing data from other software formats\nWe do notice a few strange values for some variables. For example, let’s inspect the ppltrst and dscrgrp variables in a little more detail:\n\nosterman |&gt; data_tabulate(c(ppltrst, dscrgrp))\n\nThe results in the frequency tables look good. So it’s probably something awkward about the labelling. We can check the codebook again; to allow for all levels of the ppltrst variable to be tabulated, we can change the number of maximum values shown from the default 10 to something larger:\n\nosterman |&gt; data_codebook(c(ppltrst, dscrgrp), max_values = 20)\n\nAs we see, the so-called “tagged” NA/missing values are causing the ordering of the values to be unexpected: because of letters appearing as part of a numeric value scale, the scale is automatically ordered following “alphabetic sorting” rather than “natural sorting”. R is not designed to handle “tagged” NA/missing values, but these are commonly used in other statistical software, and the original dataset was imported from a Stata/.dta format. In most cases this will not pose an issue, but it’s safer to convert all “tagged” missing values to standard NAs. We can easily do that with the zap_na_tags() function from the sjlabelled package:\n\nosterman &lt;- sjlabelled::zap_na_tags(osterman)\n\nWe can test the result to see if it is what we would expect:\n\n## testing the results:\n\nosterman |&gt; data_codebook(c(ppltrst, dscrgrp), max_values = 20)",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-4-descriptive-visualisation",
    "href": "materials/worksheets/worksheets_w02.html#exercise-4-descriptive-visualisation",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 4: Descriptive visualisation",
    "text": "Exercise 4: Descriptive visualisation\nCreate some basic descriptive graphs using the ggplot() command from the {ggplot2} tidyverse package for the association between the following variables:\n\n‘trustindex3’ and ‘eduyrs25’\n‘trustindex3’ and ‘agea’\n‘trustindex3’ and ‘female’\n\n1. ‘trustindex3’ and ‘eduyrs25’\nThe best way to approach this problem is by working through the first examples in Kieran Healy’s Data Visualization: A practical introduction, starting at Chapter 3, and applying them to your data. Outside class, you can develop these basic graphs into better looking ones by adding various extra layers. The ggplot() function is part of the ggplot2 package, which is included in the core tidyverse, so we don’t need to load it separately if we have already loaded the tidyverse.\nThe ggplot approach to graphs is to build them up step-by-step using various layers. The basic template code for a ggplot() graph is the following:\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) +  &lt;GEOM_FUNCTION&gt;()\nFor example, the code below sets up a totally blank canvas:\n\nggplot()\n\nThe result is the same if we specify a data-frame object only. The commands below are equivalent\n\nggplot(data = osterman)\nggplot(osterman)\n\nTo start populating the canvas we need to add a first layer containing the variables we want to ‘map’ using the aes() argument (for “aesthetic mapping”). This adds coordinates to the canvas based on the values of the variable we are mapping. For example, in the code below we ‘map’ the trustindex3 variable on the y (vertical) axis:\n\n# either:\nggplot(data = osterman, aes(y = trustindex3))\n\n# or:\nggplot(osterman, aes(y = trustindex3))\n\n# or:\nggplot(aes(y = trustindex3), data = osterman)\n\n# but this is not sufficient, as the data is expected to be the first object by default:\nggplot(aes(y = trustindex3), osterman)\n\n\nggplot(osterman, aes(y = trustindex3))\n\nWe now see the canvas partitioned by horizontal grid lines, equally paced within the minimum value of 0 and maximum of 10, which are the limits of the trustindex3 variable. We could also ‘map’ the trustindex3 variable on the x (horizontal) axis:\n\nggplot(osterman, aes(x = trustindex3))\n\nWe have the same canvas as before, but transposed.\nIf we are interested in plotting the relationship between two variables (in our case, trustindex3 and eduyrs25), we can ‘map’ one on the y axis and the other on the x axis. The choice of which variable should go where is our decision, but because in our analysis we are treating trustindex3 as the outcome (dependent) variable, the convention is to position it on the y axis.1\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25))\n\nWe now have a basic layer, but no actual data. The next crucial move is to add another layer with the type of graph we wish to produce (called a “geom” in ggplot, short for “geometric object”, such as a bar, a line, a boxplot, histogram, etc.) using the + operator. For example, we could produce a histogram of the trustindex3 variable by adding + geom_histogram() to the earlier mapping code:\n\n# mapped to `x`\nggplot(osterman, aes(x = trustindex3)) + geom_histogram()\n\n# mapped to `y`\nggplot(osterman, aes(y = trustindex3)) + geom_histogram()\n\nWe could also structure the command differently, by mapping the aesthetics within the geom function:\n\nggplot(osterman) + geom_histogram(aes(x = trustindex3))\n\n# or simply:\n\nggplot(osterman) + geom_histogram(aes(trustindex3))\n\nOr even separating the aesthetics specification out completely:\n\nggplot(osterman)  + aes(trustindex3) + geom_histogram()\n\nWhichever style we choose, we should aim for consistency in our code. Each may have advantages and disadvantages when expanding the function with various other more complex specifications for customising the graphs further, but we will not cover visualisation in that much detail in this course. Kieran Healy’s book on data visualisation is a good resource for ideas that you can test out.\nTo visualise the relationship between trustindex3 and eduyrs25, given that both variables are measured on a numeric scale (or at least on an ordinal scale with seven or more categories), the best option is a scatterplot. In ggplot(), a scatterplot “geom” is called with geom_point():\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) + geom_point()\n\nWe now have a scatterplot of the relationship between ‘trustindex3’ and ‘eduyrs25’. However, our data presents some challenges: our measurement scales are relatively short (length(unique(na.omit(osterman$trustindex3))) = 40 and length(unique(na.omit(osterman$eduyrs25))) = 26) and the data are spread out across all categories. As such, the points that we see on the plot actually represent a great number of overlapping data points. But does each represent the same number of overlapping points, or is there variation? There are a few tricks that we can employ to improve this visualisation. The function geom_jitter() (a shortcut to the specification geom_point(position = \"jitter\")) is helpful in such cases because it adds a small amount of random variation to the location of each point, making areas of overlapping points more visible. The commands below do the same thing:\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_point(position = \"jitter\")\n\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_point() + \n  geom_jitter()\n\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_jitter()\n\nAnother useful specification in this case would be to add some level of transparency to the points. That would allow us to distinguish more clearly between the areas with more or fewer overlapping data points, giving a better indication of where the data is clustered and whether there is any noticeable ttrend in that distribution. We can add transparency to a colour with the alpha option. An alpha = 1 means no transparency (the default), while an alpha level closer to 0 represents higher levels of transparency. Given the large number of data-points in our case, a rather high transparency level of 0.1 is probably a good option:\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_point(position = \"jitter\", alpha = 0.1)\n\nThere seems to be some positive trend in the way the data is distributed, but to get a better sense we can add another geom, geom_smooth(), which provides a set of options. This geom plots “smooth lines” representing various types of regression fit lines. The function fits a regression in the background and graphs the results. The default setting is to fit a generalized additive model that captures non-linearities in the data with a smoothing spline (the Wikipedia article on GAMs gives a maths-heavy outline of these models, but they are beyond our interests here). The produced output is probably more informative about the general idea:\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_jitter(alpha = 0.1) +\n  geom_smooth()\n\nBut we can also specify other regression methods, and because we are here aiming to model the relationship between trust and education as a linear model, we can specify the method as “lm”:\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_jitter(alpha = 0.1) +\n  geom_smooth(method = \"lm\")\n\nNow we get a straight regression line, which is basically the visual representation of the bivariate linear regression model that we will fit in Exercise 5 below.\nThere are numerous further specifications that can be added to improve the graph. We won’t go into much more detail about these additional options here, but as a taster, let’s say that we want to make the regression line more pronounced by changing its colour to red:\n\nggplot(osterman, aes(y = trustindex3, x = eduyrs25)) +\n  geom_jitter(alpha = 0.1) +\n  geom_smooth(method = \"lm\", colour = \"red\")\n\n2. ‘trustindex3’ and ‘agea’\nWe can now do something similar for the relationship between trust and age (the ‘trustindex3’ and ‘agea’ variables in the dataset). Again, both variables are measured on a numeric scale, so a scatterplot should work best. Because we don’t know what to expect and therefore what additional settings would improve each individual graph, we start from the most basic informative layer and build up from there. To practice some alternative approaches to working with plots, here we will first save the basic plot as a ggplot object, to which we can later add further layers and specifications:\n\nage_plot &lt;- ggplot(osterman, aes(y = trustindex3, x = agea)) +\n  geom_point()\n\nIf no output was generated from the command above, that’s as expected. The graph was produced, but we didn’t ask for it to be printed, we only asked for it to be saved as an object called “age_plot”. To see it, we can simply call “age_plot”. We can then make various additions to this plot.\n\nage_plot\n\nThis looks very similar to the previous graph, so we could add the same additional specifications as in the previous exercise, this time to the plot object that we saved:\n\nage_plot +\n  geom_jitter(alpha = 0.1) +\n  geom_smooth(method = \"lm\", colour = \"red\")\n\nThe association between age and trust appears very weak, something that we will explore further in Exercise 5.\n3. ‘trustindex3’ and ‘female’\nWe can try a similar scatterplot here too, but there may be better options:\n\nggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_point(alpha = 0.1)\n\nA scatterplot expects two continuous variables, but the female variable only has two levels (categories) numerically coded as {0, 1}. Because of this, the geom_point() plot type effectively treats it as a continuous measure with all values in-between 0 and 1 missing. We can see in the plot the variation across trust within each sex category, but it’s hard to get a sense of any differences between the sexes. We could - as we did before - apply jitter and transparency to the plotted values and add in a linear regression fit line:\n\nggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_point() +\n  geom_jitter(alpha = 0.1) +\n  geom_smooth(method = \"lm\", colour = \"red\")\n\nPerhaps this highlights a bit better how the geom_jitter() function actually works; it pulls overlapping data points apart, so that the areas with fewer overlapping data points (i.e. where the distribution is thinner) are more clearly distinguishable from the areas with more overlapping data points (i.e. where the distribution is thicker). Here it is much more obvious than in the previous example that the plot with the jitter is just a visual artefact: we, of course, have not created any new “sexes” with values of 0.4 or 0.6 in-between 0 and 1, even though visually that’s what we see.\nThere are various further options that we could add, for example we could change the width and height of the jitter, the alpha level, and even the number of break points on the x scale (to make the plot even more confusing):\n\na &lt;- ggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_jitter(width = NULL, \n              height = NULL,\n              alpha = 1) +\n  geom_smooth(method = \"lm\", colour = \"red\", linewidth = 0.1) +\n  scale_x_continuous(breaks = c(0, 0.4, 0.6, 1)) +\n  ggtitle(\"geom_jitter() defaults\")\n\nb &lt;- ggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_jitter(width = 0.45, \n              height = 0.5,\n              alpha = 0.1) +\n  geom_smooth(method = \"lm\", colour = \"red\", linewidth = 0.3) +\n  scale_x_continuous(breaks = c(0, 0.4, 0.6, 1)) +\n  ggtitle(\"w=0.45; h=0.5; \\u03b1=0.1\")\n\nc &lt;- ggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_jitter(width = 0.5, \n              height = 3,\n              alpha = 0.01) +\n  geom_smooth(method = \"lm\", colour = \"red\", linewidth = 0.3) +\n  scale_x_continuous(breaks = c(0, 0.4, 0.6, 1)) +\n  ggtitle(\"w=0.5; h=3.5; \\u03b1=0.01\")\n\nBecause female is a dichotomous/binary factor (categorical) variable, we would be better off using another “geom”. A good visualisation tool in the this case is a boxplot, which can be called with the geom_boxplot() function:\n\nggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_boxplot()\n\nThe issue with this graph is that the female variable, while a dichotomous/binary categorical variable, is not labelled; instead, the value 1 is taken to represent the “true” value for the name of the variable (i.e. 1 means that one is female, as the variable name states, and the value 0 means that they are not female, but male).\nWe could use the set_labels() function from the sjlabelled package to add labels to this variable:\n\nosterman &lt;- osterman |&gt; \n  sjlabelled::set_labels(female, labels = c(\"Male\", \"Female\"))\n\nThe sjlabelled package also has a special variable type - as_label() - which is useful for forcing R to use the labels of factor variables in outputs. In the command below, we first change the variable type with as_label(), then we run the same ggplot(_) function as before:\n\n# We are overwriting the original dataset here, so we better not make a mistake:\nosterman &lt;- osterman |&gt; mutate(female = sjlabelled::as_label(female))\n\n# And from now on the 'female' variable will be treated as a labelled factor:\nggplot(osterman, aes(y = trustindex3, x = female)) +\n  geom_boxplot()\n\nBox-plots contain a lot of useful summary information about variables, and the interpretation of the shapes is the following:\n\n\nbox-plot\n\nIn the case above, where we compare the average (median) level of trust across males and females in the data, we find that the two sexes do not differ much at all. We can also check a more precise numeric comparison; using the dplyr package, we could do:\n\nosterman |&gt; \n  group_by(female) |&gt; \n  summarise(Mean=mean(trustindex3), Median=median(trustindex3), SD=sd(trustindex3))",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-5-fit-simple-bivariate-regression-models-using-ols",
    "href": "materials/worksheets/worksheets_w02.html#exercise-5-fit-simple-bivariate-regression-models-using-ols",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 5: Fit simple bivariate regression models using OLS",
    "text": "Exercise 5: Fit simple bivariate regression models using OLS\nFit three simple bivariate OLS regressions using the lm() function:\n\nRegress ‘trustindex3’ on ‘eduyrs25’ and interpret the results\nRegress ‘trustindex3’ on ‘agea’ and interpret the results\nRegress ‘trustindex3’ on ‘female’ and interpret the results\nRegress ‘trustindex3’ on all three predictors listed above and interpret the results\n\n1. Regress ‘trustindex3’ on ‘eduyrs25’ and interpret the results\nWe will do just that, saving the regression as an object called “m1” (for model 1):\n\nm1 &lt;- lm(trustindex3 ~ eduyrs25, data = osterman)\n\nThe model object has now been saved in the Environment, and we can inspect it manually if we want by opening it in the Source window. The object is a large list, with various components that we can call and print separately. The most basic information that we can obtain from the model is the coefficients:\n\ncoefficients(m1)\n\nThis basic information is enough to solve the linear equation underpinning the model:\n\\[ y_i=b_0+b_1x_i \\] The coefficients correspond to the \\(b\\)’s in this simple model, and we can plug the values in to obtain\n\\[ trust_i=3.91 + 0.11 \\times education_i \\]\nWe find, thus, that the number of years spent in education has a positive outcome on social trust, with each additional year of education associated with a 0.11-points higher score on the trust index, above the baseline of 3.91 points in the case when education is equal to 0. With this formula we can calculate predictions of the trust score for any individual \\(i\\) from their years of education.\nWe can also get more information about the model with the summary() function. When applied to a linear model object, it provides the following output:\n\nsummary(m1)\n\nThis output tells us a lot more about the fitted model, for example a summary table of the residuals and an analysis of variance (ANOVA) summary of the residuals, as well as estimates of variation for our coefficients (the standard errors and the p-values associated with t-tests - displayed as Pr(&gt;|t|)).\nWhile these are informative, the format is not ideal for further manipulation and presentation. Several user-written functions exist to improve on this output. For example, the {broom} package - part of the {tidymodels} suite of packages - has functions to extract model information into “tidy” tibbles (data sets), which can then be further manipulated and plotted. This is especially useful when working with results from many models that would benefit from comparing in a standardised format.\nThe summary() function prints out a lot of information, but it’s not the best format if we wish to reuse the various statistical components for further analysis, and the presentation of the output could also be improved. The model_parameters() and the model_performance() functions from the parameters package part of easystats is a better option:\n\nmodel_parameters(m1) \n\nmodel_performance(m1)\n\nThe output table shows both 95% confidence intervals (CI) and the standard errors (SE), which can be easier to interpret (CI are calculated as Estimate +/- (1.96 x Std. Error); you can try it out in the Console, replacing in the numeric values).\nThe best approach is to graph the model results and present them in a figure, but that’s not very informative in the case of a simple model with only one predictor, so we can leave it for later.\n2. Regress ‘trustindex3’ on ‘agea’ and interpret the results\nWe can do as above:\n\n# Write your own code; name the mode \"m2\"\n\n3. Regress ‘trustindex3’ on ‘female’ and interpret the results\n\n# Write your own code; name the model \"m3\"\n\n4. Regress ‘trustindex3’ on all three predictors listed above and interpret the results\nFinally we can fit a multiple linear model with several predictors:\n\n# Write your own code; name the model \"m4\"\n\nOne interesting finding from Model 4 is to notice how radically the statistical significance of the female variable changes compared to Model 3. The impact of gender is still very weak in real terms: compared to men of similar age and education level, women score 0.04 points higher on the trust scale; but this is still a stronger effect than in the simple bivariate model (where \\(b_1\\) was 0.008), and our confidence intervals are much narrower.\nIt’s worth noticing that the number of observations used in the two models is not the same, due to missing values in some variables. We could make the samples comparable by selecting out the sample of 68,211 included in Model 4, then refitting Model 3 on that sample only:\n\nsample &lt;- m4$model\n\nm3_new &lt;- lm(trustindex3 ~ female, data = sample)\n\nmodel_parameters(m3) \n\nWe see that this does not affect the overall picture.",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#exercise-6-advanced-apply-the-model-to-a-new-dataset",
    "href": "materials/worksheets/worksheets_w02.html#exercise-6-advanced-apply-the-model-to-a-new-dataset",
    "title": "Week 2 Lab Exercises",
    "section": "Exercise 6 (Advanced): Apply the model to a new dataset",
    "text": "Exercise 6 (Advanced): Apply the model to a new dataset\nThe ostermann data originates from Waves 1-9 of the European Social Survey. The ESS data are accessible freely upon registration. As part of this exercise, access data from Wave 10 of the survey (from this site: https://www.europeansocialsurvey.org/data/) and perform the following tasks:\n\ndownload the dataset to the Rproject folder\nselect the variables required to recreate the data to fit the multiple regression model from the previous exercise\ncreate your version of the ‘trustindex3’ variable\nfit the models from Exercise 2 and compare the results.\n\nYou should already be familiar with the functions needed to complete each of these steps, but it may require some self-study. The most important missing information required to complete this exercise is to be found in the description on how the trustindex3 scale was computed:\n\nTo study generalized social trust, I am following the established approach of using a validated three-item scale (Reeskens and Hooghe 2008; Zmerli and Newton 2008). This scale consists of the classic trust question, an item on whether people try to be fair, and an item on whether people are helpful:  - ‘Generally speaking, would you say that most people can be trusted, or that you can’t be too careful in dealing with people?’  - ‘Do you think that most people would try to take advantage of you if they got the chance, or would they try to be fair?’  - ‘Would you say that most of the time people try to be helpful or that they are mostly looking out for themselves?’  All of the items may be answered on a scale from 0 to 10 (where 10 represents the highest level of trust) and the scale is calculated as the mean of the three items. The three-item scale clearly improves measurement reliability and cross-country validity compared to using a single item, such as the classic trust question. … See the Supplementary material for additional information on the construction of the social trust scale (Section A.1), as well as for models using the classic single-item measure of trust (Section A.9).",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w02.html#footnotes",
    "href": "materials/worksheets/worksheets_w02.html#footnotes",
    "title": "Week 2 Lab Exercises",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis “convention” makes sense conceptually, if we think about plotting in the same way as we think about modelling - i.e. that we are describing the y variable as a function of the x variable. As we will see later, the ggformula package expands {ggplot} precisely alongside this logic, by simplifying the ggplot() syntax so that it resembles the syntax of the linear model-fitting function lm(). For our example, ggplot2::ggplot(osterman, aes(y = trustindex3, x = eduyrs25)) + geom_point() is equivalent to ggformula::gf_point(osterman, trustindex3 ~ eduyrs25).↩︎",
    "crumbs": [
      "Materials",
      "Week 2",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#a-web-r-chunk",
    "href": "materials/slides/hss8005_w1.html#a-web-r-chunk",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "A web-r chunk",
    "text": "A web-r chunk\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#anoter-chunk",
    "href": "materials/slides/hss8005_w1.html#anoter-chunk",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Anoter chunk",
    "text": "Anoter chunk\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#aims",
    "href": "materials/slides/hss8005_w1.html#aims",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Aims",
    "text": "Aims\nBy the end of the session, you will:\n\nunderstand how to use the most important panels in the RStudio interface\ncreate an RStudio Project to store your work throughout the course\nbegin using R scripts (.R) and Quarto notebooks (.qmd) to record and document your coding progress\nunderstand data types and basic operations in the R language\nunderstand the principles behind functions\n\nknow how to install, load and use functions from user-written packages\ngain familiarity with some useful functions from packages included in the tidyverse ecosystem.\n\nThis lab is an introduction to R and RStudio for the purposes of this module. Those new to R should also complete the R for Social Scientists online training course on their own (estimated to take around 5-6 hours), as well as read through the assigned chapters from the R4DS textbook."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#r-and-rstudio",
    "href": "materials/slides/hss8005_w1.html#r-and-rstudio",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "R and RStudio",
    "text": "R and RStudio\nTo install R and RStudio on your personal computers, follow the steps outlined here based on your operating system.\nAlthough you will only interact directly with RStudio in this module, R needs to be installed first.\nThink of the relationship between the two as that between the engine of a car (R) and the dashboard of a car (RStudio):\n\nOr perhaps imagine driving the car on the left vs. the one on the right:"
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#the-rstudio-interface",
    "href": "materials/slides/hss8005_w1.html#the-rstudio-interface",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "The RStudio interface",
    "text": "The RStudio interface\nThe RStudio interface consists of four main panes (which can be customised to some degree):\n\nThe R Console Pane\nThe R Console, by default the left or lower-left pane in R Studio, is the home of the R engine. This is where the commands are actually run and non-graphic outputs and error/warning messages appear. The Console is the direct interface to the R software itself; it’s what we get if instead of RStudio we open the R software: a direct interface to the R programming language, where we can type commands and where results/messages are printed.\nYou can directly enter and run commands in the R Console, but realize that these commands are not saved as they are when running commands from a script. For this reason, we should not use the Console pane directly too much, ad reserve it only for quick and dirty calculations and checks. For typing commands that we want R to execute, we should instead use an R script file, where everything we type can be saved for later and complex analyses can be built up.\nThe Source Pane\nThis pane, by default in the upper-left, is a space to work with scripts and other text files. This pane is also where datasets (data frames) open up for viewing.\n\n\n\n\n\n\nNote\n\n\nIf your RStudio displays only one pane on the left, it is because you have no scripts open yet. We can open an existing one or create a new one. We’ll do that a bit later.\n\n\n\nThe Environment Pane\nThis pane, by default in the upper-right, is most often used to see brief summaries of objects that are available in an active session. Datasets loaded for analysis would appear here.\n\n\n\n\n\n\nNote\n\n\nIf your Environment is empty, it means that you don’t have any objects loaded or created yet. We will be creating some objects later and we will also import an example dataset.\n\n\n\nFiles, Plots, Packages, Help, etc. The lower-right pane includes several tabs including plots (display of graphics including maps), help, a file library, and available R packages (including installation/update options).\n\n\n\n\n\n\nTip\n\n\nYou can arrange the panes in various ways, depending on your preferences, using Tools &gt; Global Options in the top menu. So the arrangement of panes may look different on different computers."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#general-settings",
    "href": "materials/slides/hss8005_w1.html#general-settings",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "General settings",
    "text": "General settings\nYou can personalise the look and feel of your RStudio setup in various ways using Tools &gt; Global Options from the top menu, but setting some options as default from the very start is highly recommended. You can see these in the pictures below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe most important setting in the picture on the left is the one to restore .RData at startup and saving the workspace as .RData on exit. Make sure these are un-ticked and set to Never, respectively, as shown in the picture. It’s always safer to start each RStudio session in a clean state, without anything automatically pre-loaded from a previous session. That could lead to serious and hard to trace complications.\nIn the picture on the right, you have the option to select that the new native pipe operator (|&gt;) (we’ll talk about it later!) be inserted using the Ctrl+Shift+M keyboard shortcut instead of the older version of the pipe (%&gt;%).\n\nThese settings will make more sense later, but it’s a good idea to have them sorted at the very beginning."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#scripts-markdown-documents-and-projects",
    "href": "materials/slides/hss8005_w1.html#scripts-markdown-documents-and-projects",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Scripts, markdown documents and projects",
    "text": "Scripts, markdown documents and projects\nWriting brief commands that you want to test out in the Console is okay, but what you really want is to save your commands as part of a workflow in a dedicated file that you can reuse, extend and share with others.\nIn every quantitative analysis, we need to ensure that each step in our analysis is traceable and reproducible. This is increasingly a professional standard expected of all data analysts in the social sciences. This means that we need to have an efficient way in which to share our analysis code, as well as our outputs and interpretations of our findings. RStudio has an efficient way of handling this requirement with the use of R script files and versions of the Markdown markup language that allow the efficient combining of plain text (as in the main body of an article) with analysis code and outputs produced in R. The table below lists the main characteristics of these file types:\n\n\nFormat\nExtension\nDescription\n\n\n\nR Script\n.R\nUse an R script if you want to document a large amount of code used for a particular analysis project. Scripts should contain working R commands and human-readable comments explaining the code. Commands can be run line-by-line, or the whole R script can be run at once. For example, one can write an R script containing a few hundred or thousands of lines of code that gathers and prepares raw, unruly data for analysis; if this script can run without any errors, then it can be saved and sourced from within another script that contains code that undertakes the analysis using the cleansed dataset. Comments can be added by appending them with a hashtag (#).\n\n\nR Markdown\n.Rmd\n\nMarkdown is a simple markup language that allows the formatting of plain text documents. R Markdown is a version of this language written by the R Studio team, which also allows for R code to be included. Plain text documents having the .Rmd extension and containing R Markdown-specific code can be knitted (exported) directly into published output document formats such as HTML, PDF or Microsoft Word, which contain both normal text as well as tables and charts produced with the embedded R code. The code itself can also be printed to the output documents.\n\n\nQuarto document\n.qmd\nQuarto is a newer version of R Markdown which allows better compatibility with other programming languages. It is a broader ecosystem design for academic publishing and communication (for example, the course website was built using quarto), but you will be using only Quarto documents in this module. There isn’t much difference between .Rmd and .qmd documents for their uses-cases on this module, so one could easily change and .Rmd extension to .qmd and still produce the same output. .qmd documents are rendered instead of knitted, but for RStudio users the underlying engine doing the conversion from Quarto/R Markdown to standard Markdown to output file (HTML, PDF, Word, etc.) is the same. Read more about Quarto document in the TSD textbook.\n\n\n\nCreating new files can be done easily via the options File &gt; New File &gt; from the top RStudio menu.\nThe best way to use these files are as part of R project folders, which allow for cross-references to documents and datasets to be made relative to the path of the project folder root. This makes sure that no absolute paths to files (i.e. things like C:/Documents/Chris/my_article/data_files/my_dataset.rds) need to be used (instead, you would write something like ~/data_files/my_dataset.rds if the my_article folder was set up as an R Project). This allows for the same code file to be run on another computer too without an error, ensuring a minimal expected level of reproducibility in your workflow.\nSetting up an existing or a new folder as an R Project involves having a file with the extension .RProj saved in it. This can be done easily via the options File &gt; New Project from the top RStudio menu."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#r-data-types-and-structures",
    "href": "materials/slides/hss8005_w1.html#r-data-types-and-structures",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "\nR data types and structures",
    "text": "R data types and structures\nThe basic elements of data in R are called vectors. R has 6 basic data types that you should be aware of:\n\ncharacter: a text string, e.g. name\n\nnumeric: a real or decimal number\ninteger: non-decimal number; often represented by a number followed by the letter L, e.g. 5L\nlogical: TRUE or FALSE\ncomplex: complex numbers with real and imaginary parts\n\nR provides several functions to examine features of vectors and other objects, for example:\n\nclass() - what kind of object is it (high-level)?\ntypeof() - what is the object’s data type (low-level)?\nlength() - how long is it? What about two dimensional objects?\nattributes() - does it have any metadata?\n\nYou can explore some basic vector operations in Exercise 4 of the lab worksheet."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#data-frames",
    "href": "materials/slides/hss8005_w1.html#data-frames",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Data frames",
    "text": "Data frames\nIt is useful to know about vectors, but we will use them primarily as part of larger data frames. Data frames are objects that contain several vectors of similar length. In a data frame each column is a variable and each row is a case. They look like spreadsheets containing data.\nThere are several toy data frames built into R, and we can have a look at one to see how it looks like. You can get a list of the available built-in datasets and their brief descriptions with the data() command.\nFor example, the mtcars data frame is built into R and so you can access it without loading any files. To get the dimensions, you can use dim(), nrow(), and ncol().\n\n\ndim(mtcars)\n\n\n[1] 32 11\n\nnrow(mtcars)\n\n[1] 32\n\nncol(mtcars)\n\n[1] 11\n\n\nWe can also load the dataset into our Environment and look at it manually:\n\n\nmtcars &lt;- mtcars\n\n\n\nThe new object has appeared in the Environment under a new section called Data. We can click on it and the dataset will open up in the Source pane. What do you think this dataset is about?\nYou can select each column/variable from the data frame use the $, turning it into a vector:\n\n\nmtcars$wt\n\n\n [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070\n[13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840\n[25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780\n\n\nYou can now treat this just like a vector, with the subsets and all.\n\n\nmtcars$wt[1]\n\n\n[1] 2.62\n\n\nWe can subset to the first/last k rows of a data frame\n\n\nhead(mtcars)\n\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\ntail(mtcars)\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\nThere are various ways in which one can further subset and wrangle vectors and data frames using base R functions, but the tidyverse and other user-written packages provide more functionality and ease of use. In this course, we will rely mostly on these."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#functions",
    "href": "materials/slides/hss8005_w1.html#functions",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Functions",
    "text": "Functions\nMost of the work in R is done using functions. It’s possible to create your own functions. This makes R extremely powerful and extendible. We’re not going to cover making your own functions in this course, but it’s important to be aware of this capability. There are plenty of good resources online for learning how to do this, including this one."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#packages",
    "href": "materials/slides/hss8005_w1.html#packages",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Packages",
    "text": "Packages\nInstead of programming your own functions in the R language, you can rely on functions written by other people and bundled within a package that performs some set task.\nWhen you install R, a set of packages containing various functions are also installed by default. These packages make up what is colloquially referred to as base R. Functions from these packages can be used straight away and they cannot be deleted or installed separately. The functionality of these base R packages is updated with each new edition of R, but not in between new releases of the software. The code below lists the names of all the packages in base R:\n\n\nnames(which(installed.packages()[ ,\"Priority\"] == \"base\", ))\n\n\n [1] \"base\"      \"compiler\"  \"datasets\"  \"graphics\"  \"grDevices\" \"grid\"     \n [7] \"methods\"   \"parallel\"  \"splines\"   \"stats\"     \"stats4\"    \"tcltk\"    \n[13] \"tools\"     \"utils\"    \n\n\nWe see in the list that there is also a package called base, which contains 1283 elementary functions. However, when we refer to base R, we usually mean the functions from all the 14 packages listed above.\nApart from these packages that come pre-installed and pre-loaded with our R installation, there are also a number of recommended packages, which can be thought of as an extended base R. These packages also come pre-installed in binary distributions of R, but they need to be loaded in order to make their functions available for use. These recommended packages are:\n\n\nnames(which(installed.packages()[ ,\"Priority\"] == \"recommended\", ))\n\n\n [1] \"lattice\"    \"MASS\"       \"Matrix\"     \"mgcv\"       \"nlme\"      \n [6] \"boot\"       \"class\"      \"cluster\"    \"codetools\"  \"foreign\"   \n[11] \"KernSmooth\" \"lattice\"    \"MASS\"       \"Matrix\"     \"mgcv\"      \n[16] \"nlme\"       \"nnet\"       \"rpart\"      \"spatial\"    \"survival\"  \n\n\nApart from these recommended packages, there is a great - and ever increasing - number of user-written packages that satisfy various programming needs. Some packages contain functions that are particularly useful for social scientists. Sometimes a number of packages that contain complementary functionality and are designed to work well together are brought under one meta-package, which allows for all those packages to be installed and loaded at once. The most popular such meta-package is the tidyverse, which includes such packages as dplyr (for data manipulation), readr (for reading in rectangular data like .csv files), tidyr (for cleaning datasets), stringr (for working with strings, that is, textual data), forcats (for managing factors, that is, categorical variables) or ggplot2 (for data visualisation), among [several others](https://www.tidyverse.org/packages/.\nThe tidyverse packages have been developed around a coding philosophy that is very different from that of base R. It is sometimes referred to as a special dialect of the R language and has greatly contributed to popularising R and making it more easily available to practising social scientists who do not have a programming background, by designing code whose grammar is somewhat closer to that of human languages such as English. This is generally thought to lower the entry barriers to R for new users, although there isn’t a clear consensus on that.\nAnother recently developed meta-package, which was specifically designed with non-programmer social scientists in mind, is the easystats bundle. We will be relying on easystats packages quite a lot in this module, as they provide a very coherent set of functions that improve on the tidyverse.\nBoth of these meta-packages and thousands of other packages are available from the Comprehensive R Archive Network (CRAN). Many more packages are distributed as repositories on code-sharing platforms such as GitHub or R Universe.\nPackages made available on CRAN can be installed using the command install.packages(\"packagename\"). Once the package/library is installed (i.e. it is sitting somewhere on your computer), we can then load functions from that package using the :: operator (e.g. package::function()), or we can make all the functions from a package available by attaching that package with the library() function (e.g. library(package)).\nSo using a package/library is a two-stage process. We:\n\n\n **Install** the package/library onto your computer (from CRAN or another repository)\n2.a. Load functions from the package as you use them, or: 2.b. Attach the whole package to R’s search path, making all functions available to use by name\n\nLet’s start by installing the tidyverse meta-package, and then attach it:\n\n\ninstall.packages(\"tidyverse\")  ## this command installs packages from CRAN; note the quotation marks around the package name\n\n\n\nYou can check the suite of packages that are available when you attach the tidyverse library using a command from the tidyverse itself:\n\n\ntidyverse_packages()\n\n\n\n\nQuestion\nWhy do you think we got an error message when we tried to run the above command?\n\nBecause tidyverse_packages() is itself a function from the tidyverse, in order to use that function we need not only to install the tidyverse but also to make its functions available. In other words, we did not yet attach the tidyverse for use in our R session, we only just installed it on our computers.\nIf we don’t want to attach a package that we have downloaded - because maybe we only want to use a single function once and we don’t want to burden our computer’s memory, we can load explicitly given functions from a package in the following way:\n\n\ntidyverse::tidyverse_packages()  # Here we state the package followed by two colons, then followed by the function we want\n\n\n\nBut in many cases we do want to use several functions at various points in an analysis session, so it is often useful to attach the entire package or set of packages:\n\n\nlibrary(tidyverse)\n\n\n\nNow we can use functions from that package without having to explicitly state the name of the package. We can still state the name explicitly, and that may be useful for readers of our code to understand what package a function come from. Also, it may happen that different packages have similarly named functions, and if all those packages are attached, then the functions from a package attached later will override that in the package attached earlier. R will note in a comment whether any functions from a package are masked by another, so it’s worth paying attention to the comments and warnings printed by R when we attach packages."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#installing-and-attaching-packages",
    "href": "materials/slides/hss8005_w1.html#installing-and-attaching-packages",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Installing and attaching packages",
    "text": "Installing and attaching packages\nBoth install.packages() and library() are base R functions, but there are several other user-written packages that provide additional functionality to make it easier and more efficient to install, attach and manage packages. For example, the pacman package contains a function p_load() that allows us to attach several packages at once and install them from CRAN on the fly if they are not yet installed. The sister function p_load_gh() does the same for packages not published on CRAN but stored on personal repositories on GitHub. The librarian package does the same with the shelf() function, which installs missing packages from CRAN as well as GitHub.\nFor example, we can download and attach a number of packages in one go with the command below:\n\n\n# First, install {librarian} itself if not yet installed:\n\nif (!require(\"librarian\")) install.packages(\"librarian\") \n\n# Then attach/install other packages using `librarian::shelf()`:\n\nlibrarian::shelf(\n  tidyverse,\n  easystats,\n  sjlabelled,\n  gtsummary,\n  ggformula\n  )\n\n\n\nThese are some useful packages that we will be using in this module. You can read more about the (meta)packages we have just installed here:\n\ntidyverse\neasystats\nsjlabelled\ngtsummary\nggformula"
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#about-the-tidyverse",
    "href": "materials/slides/hss8005_w1.html#about-the-tidyverse",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "About the Tidyverse\n",
    "text": "About the Tidyverse"
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#data-frames-and-tibbles",
    "href": "materials/slides/hss8005_w1.html#data-frames-and-tibbles",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Data frames and tibbles\n",
    "text": "Data frames and tibbles\n\nThe Tidyverse is built around the basic concept that data in a table should have one observation per row, one variable per column, and only one value per cell. Once data is in this tidy format, it can be transformed, visualized and modelled for an analysis.\nWhen using functions in the Tidyverse ecosystem, most data is returned as a tibble object. Tibbles are very similar to the data.frames (which are the basic types of object storing datasets in base R) and it is perfectly fine to use Tidyverse functions on a data.frame object. Just be aware that in most cases, the Tidyverse function will transform your data into a tibble. If you are unobservant, you won’t even notice a difference. However, there are a few differences between the two data types, most of which are just designed to make your life easier. For more info, check R4DS."
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#selected-dplyr-functions",
    "href": "materials/slides/hss8005_w1.html#selected-dplyr-functions",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Selected dplyr functions",
    "text": "Selected dplyr functions\nThe dplyr package is designed to make it easier to manipulate flat (2-D) data (i.e. the type of datasets we are most likely to use, which are laid out as in a standard spreadsheet, with rows referring to cases (observations; respondents) and columns referring to variables. dplyr provides simple verbs, functions that correspond to the most common data manipulation tasks, to help you translate your thoughts into code. Here are some of the most common functions in dplyr:\n\n\nfilter() chooses rows based on column values.\n\narrange() changes the order of the rows.\n\nselect() changes whether or not a column is included.\n\nrename() changes the name of columns.\n\nmutate()/transmute() changes the values of columns and creates new columns (variables)\n\nsummarise() compute statistical summaries (e.g., computing the mean or the sum)\n\ngroup_by() group data into rows with the same values\n\nungroup() remove grouping information from data frame.\n\ndistinct() remove duplicate rows.\n\nAll these functions work similarly as follows:\n\nThe first argument is a data frame/tibble\nThe subsequent arguments are comma separated list of unquoted variable names and the specification of what you want to do\nThe result is a new data frame\n\nFor more info, check R for Social Scientists\nMost of the dplyr verbs perform tasks that can also be done in base R, but they provide more convenience. The table below lists a rough equivalence between dplyr and base R functionality:\n\n\n\n\n\n\ndplyr\nbase\n\n\n\narrange(df, x)\ndf[order(x), , drop = FALSE]\n\n\ndistinct(df, x)\n\ndf[!duplicated(x), , drop = FALSE], unique()\n\n\n\nfilter(df, x)\n\ndf[which(x), , drop = FALSE], subset()\n\n\n\nmutate(df, z = x + y)\n\ndf$z &lt;- df$x + df$y, transform()\n\n\n\npull(df, 1)\ndf[[1]]\n\n\npull(df, x)\ndf$x\n\n\nrename(df, y = x)\nnames(df)[names(df) == \"x\"] &lt;- \"y\"\n\n\nrelocate(df, y)\ndf[union(\"y\", names(df))]\n\n\nselect(df, x, y)\n\ndf[c(\"x\", \"y\")], subset()\n\n\n\nselect(df, starts_with(\"x\"))\ndf[grepl(\"^x\", names(df))]\n\n\nsummarise(df, mean(x))\n\nmean(df$x), tapply(), aggregate(), by()\n\n\n\nslice(df, c(1, 2, 5))\ndf[c(1, 2, 5), , drop = FALSE]\n\n\n\nThe above functions allow us to manage single data-frames. A set of other functions (sometimes called two-table verbs) make it possible to combine columns, rows, or both, from two or more data-frames. In base-R, much of this can be achieved with the merge() function, while in dplyr the join() function makes this possible, extending some further functionality that is not easily available in base-R. The table below lists these dplyr functions and their base-R equivalents:\n\n\ndplyr\nbase\n\n\n\ninner_join(df1, df2)\nmerge(df1, df2)\n\n\nleft_join(df1, df2)\nmerge(df1, df2, all.x = TRUE)\n\n\nright_join(df1, df2)\nmerge(df1, df2, all.y = TRUE)\n\n\nfull_join(df1, df2)\nmerge(df1, df2, all = TRUE)\n\n\nsemi_join(df1, df2)\ndf1[df1$x %in% df2$x, , drop = FALSE]\n\n\nanti_join(df1, df2)\ndf1[!df1$x %in% df2$x, , drop = FALSE]"
  },
  {
    "objectID": "materials/slides/hss8005_w1.html#the-forward-pipe-workflow",
    "href": "materials/slides/hss8005_w1.html#the-forward-pipe-workflow",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "The forward-pipe (%>%/|>) workflow",
    "text": "The forward-pipe (%&gt;%/|&gt;) workflow\nAll of the dplyr functions take a data frame or tibble as the first argument. Rather than forcing the user to either save intermediate objects or nest functions, dplyr provides the forward-pipe operator %&gt;% from the magrittr package. This operator allows us to combine multiple operations into a single sequential chain of actions. As of R 4.1.0 there is also a native pipe operator in R (|&gt;), and in RStudio one can set the shortcut to paste the new pipe operator instead (as we have done at the beginning of the lab). Going forward, we’ll use this version of the pipe operator for simplicity, but it’s likely that you will encounter the older version of the operator too in various scripts.\nLet’s start with a hypothetical example. Say you would like to perform a sequence of operations on data frame x using hypothetical functions f(), g(), and h():\n\nTake x then\n\nUse x as an input to a function f() then\n\nUse the output of f(x) as an input to a function g() then\n\nUse the output of g(f(x)) as an input to a function h()\n\nOne way to achieve this sequence of operations is by using nesting parentheses as follows:\nh(g(f(x)))\nThis code isn’t so hard to read since we are applying only three functions: f(), then g(), then h() and each of the functions is short in its name. Further, each of these functions also only has one argument. However, you can imagine that this will get progressively harder to read as the number of functions applied in your sequence increases and the arguments in each function increase as well. This is where the pipe operator |&gt; comes in handy. |&gt; takes the output of one function and then pipes it to be the input of the next function. Furthermore, a helpful trick is to read |&gt; as then or and then. For example, you can obtain the same output as the hypothetical sequence of functions as follows:\nx |&gt; \n  f() |&gt; \n  g() |&gt; \n  h()\nYou would read this sequence as:\n\nTake x then\n\nUse this output as the input to the next function f() then\n\nUse this output as the input to the next function g() then\n\nUse this output as the input to the next function h()\n\nSo while both approaches achieve the same goal, the latter is much more human-readable because you can clearly read the sequence of operations line-by-line. Instead of typing out the three strange characters of the operator, one can use the keyboard shortcut Ctrl + Shift + M (Windows) or Cmd + Shift + M (MacOS) to paste the operator."
  },
  {
    "objectID": "materials/notes/notes_w02.html",
    "href": "materials/notes/notes_w02.html",
    "title": "Week 2 Worksheet Notes",
    "section": "",
    "text": "So far we have looked at toy datasets included with R itself. In your own research - and in later weeks in this module - you will be using real data. But how do we get these data into RStudio? It depends, of course, on the format of the data you need to import.\nR’s native data format carries the extension .rds. The base-R function to load .rds datasets into R is readRDS().\nBut we can import data stored in other formats too, such as the generic comma separated values (.csv) format or the various formats used by other proprietary statistical analysis packages (e.g. SPSS, Stata, SAS).\nMany social science surveys are distributed in one of the proprietary formats mentioned, because those have been designed specifically to manage “labelled” data (i.e. variables that need to have longer descriptive labels and consist of many categorical variables whose categories/levels only make sense if they are themselves meaningfully “labelled”).\nFor example, the The World Values Survey (WVS) provides the greatest number of options for data download formats, including .rds and even .RData. However, most other large-scale cross-national surveys provide their data either in .csv, .sav (SPSS) or .dta (Stata).\nWhen you have the option, my advice is to download the .sav (SPSS) version of the data whenever possible, just because SPSS allows the longest variable and value labels and therefore that data labelling may be the most complete. It’s then easier to transport that to R than having to type everything in from a survey questionnaire when that information is needed.\nTraditionally, one of the most severe shortcomings of R compared to other proprietary statistical analysis packages has been it’s very limited and cumbersome support of labelling. This has changed significantly over the past few years. The suite of packages developed or contributed to by sociologist Daniel Lüdecke of the University of Hamburg are among the best available tools for this purpose - including the packages making up the {easystats} ecosystem.\nAs an example, let’s import a dataset from the latest wave of the World Values Survey (Wave 7). Two versions of the dataset are available via the module website (.rds and .sav), but you can download the data in other formats directly from the survey website: https://www.worldvaluessurvey.org/WVSDocumentationWV7.jsp.\nDownload the .rds version of the data file form here: https://cgmoreh.github.io/HSS8005-24/data/wvs7.rds\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to download the file in the same folder where your R script/Quarto file is located, so you can import it easily, without complications cause by directory paths (see below)\n\n\nOnce the dataset is downloaded, you can import it into R. Because the downloaded data file is in the .rds format, you can navigate to the file either from within RStudio’s Files pane, or manually in Windows Explorer, and double-click the file to open. However, this is not a recommended way of opening a file, because you want to have a record of the action in your R script for the future.\nYou can load datasets saved in the .rds format using the readRDS() command. If your dataset is in another format, you can check out the {readr} package (for rectangular data such as .csv (comma separated values) or .tsv (tab separated values)), {readxl} (for Excel data), and {sjlabelled} (for SPSS, Stata and SAS formats).\nThe more generic function data_read() from {easystats}’s {datawizard} package loads data from various formats based on the source files extension, including files from internet sources or compressed files. It relies on the {rio} package, which provides similar functionality.\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that by default the data_read() function assumes that numeric variables where all values have a value label are categorical and will convert them into factors. That means that all the numeric “values” will be replaced by the “value labels” (e.g. 1=“Yes”/ 2=“No” will become simply “Yes”/“No”). This is usually a reasonable default behaviour, because the majority of functions in R do not handle “value labels” and working with textual (character string) values can be more explicit. However, this may be less appropriate when the dataset contains many long ordered variables (such as 0-10 scale items), as we will most likely want to treat such variables as numeric in statistical models. To cancel this default behaviour, we can add the additional argument convert_factors = FALSE. This is also the format that gets imported when using readRDS(). However, most of the common tabulation and graphing functions will not show the category “labels” in the output either, and for that purpose having variables “converted to factors” (with the original “Values” overwritten by the “Value labels”) may be a better option. Below we will import the data with factors converted, as we will focus on tabulation and plotting.\n\n\nIf you have saved the dataset into the same folder where your analysis script/Quarto file lives, you can import it by specifying just the name of the dataset. If it’s in a sub-folder or a different location on the computer, you need to include a full path to the dataset, like in the example below:\n\nwvs7data &lt;- readRDS(\"D:/HSS8005/MyData/wvs7.rds\")\n\nIn the code above, I am assigning (with the assignment operator &lt;-) the data to an object I called “wvs7data”, but I could have given it any other name as long as it follows R’s naming conventions (no spaces, avoid special characters; see also recommended naming strategies in the tidyverse style guide). The object will appear in the Environment tab (on the bottom right pane).\n\n\n\n\n\n\nWarning\n\n\n\nWorking with folders and paths\nIf the data file is not in the folder where you main script (the one that does the importing) is, you will need to specify either a relative path from the script to the data file, or an absolute path from the home/working directory.\nCopy/pasting paths on Windows computers\nAn easy way to get the path to the data file is to navigate there on your computer, copy the path, and paste it into your R script. However, there are some complications with this procedure when using a Windows PC. My path above would have copied as D:\\HSS8005\\MyData\\wvs7.rds, but R does not recognise back-slashes as path elements because in R the backslash has a special meaning. You must manually replace backslashes with either forward slashes or double-backslashes (D:\\\\HSS8005\\\\MyData\\\\wvs7.rds).\nAnother option is to use the function readClipboard(), which pastes into R whatever text you have on your clipboard (after copying it) using double backslashes. For example, you can copy a path to the folder where the data is located, then add the filename to the end of the text string using the paste0() function to get a working path to the file you want to load.\nYou can check:\n\n# First, copy the path to your data folder on your computer\n# Check the output:\n\npaste0(readClipboard(), \"/wvs7.rds\")\n\nThe file in the path can then be imported as normal:\n\nwvs7data &lt;- data_read(paste0(readClipboard(), \"/wvs7.rds\"))\n\nUsing the {here} package\nWorking with paths, folders, directories in a sustainable and robust way can be a challenge. The {here} package provides some useful options if you are working within R project directories. By loading the here library, you establish the working directory to be the root folder of your R project (i.e. the folder where the .Rproj file is located), and you can easily construct paths to any file within that project by listing the folders that contain it relative to the project root. This works similarly on all operating systems, and it’s as easy as:\n\nlibrary(here)\n\nwvs7data &lt;- readRDS(here(\"HSS8005\", \"MyData\", \"wvs7.rds\"))\n\nYou can read more about the package in the “R for Social Scientists” course.\n\n\nWe can look at the dataset object in the Environment pane. If we click on the blue button with the white arrow before the name of the object, a list of variables and other information about them will roll down. If we click on the object’s name or info, the dataset will open in the Sources pane, just next to the R script file. This is equivalent to having run the following command:\n\nView(wvs7data)    \n\nNote the capital “V”; R is case-sensitive, so always pay attention; view(wvs7data) won’t work.\nYou can explore the dataset a bit. Only the first 50 columns (i.e. variables) are displayed, to see the next 50 you can click on arrow (&gt;) in the dataset window’s toolbar. Once you’ve had a quick look, you can close that view or return to the R script.",
    "crumbs": [
      "Materials",
      "Week 2",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w02.html#importing-external-data-into-rstudio",
    "href": "materials/notes/notes_w02.html#importing-external-data-into-rstudio",
    "title": "Week 2 Worksheet Notes",
    "section": "",
    "text": "So far we have looked at toy datasets included with R itself. In your own research - and in later weeks in this module - you will be using real data. But how do we get these data into RStudio? It depends, of course, on the format of the data you need to import.\nR’s native data format carries the extension .rds. The base-R function to load .rds datasets into R is readRDS().\nBut we can import data stored in other formats too, such as the generic comma separated values (.csv) format or the various formats used by other proprietary statistical analysis packages (e.g. SPSS, Stata, SAS).\nMany social science surveys are distributed in one of the proprietary formats mentioned, because those have been designed specifically to manage “labelled” data (i.e. variables that need to have longer descriptive labels and consist of many categorical variables whose categories/levels only make sense if they are themselves meaningfully “labelled”).\nFor example, the The World Values Survey (WVS) provides the greatest number of options for data download formats, including .rds and even .RData. However, most other large-scale cross-national surveys provide their data either in .csv, .sav (SPSS) or .dta (Stata).\nWhen you have the option, my advice is to download the .sav (SPSS) version of the data whenever possible, just because SPSS allows the longest variable and value labels and therefore that data labelling may be the most complete. It’s then easier to transport that to R than having to type everything in from a survey questionnaire when that information is needed.\nTraditionally, one of the most severe shortcomings of R compared to other proprietary statistical analysis packages has been it’s very limited and cumbersome support of labelling. This has changed significantly over the past few years. The suite of packages developed or contributed to by sociologist Daniel Lüdecke of the University of Hamburg are among the best available tools for this purpose - including the packages making up the {easystats} ecosystem.\nAs an example, let’s import a dataset from the latest wave of the World Values Survey (Wave 7). Two versions of the dataset are available via the module website (.rds and .sav), but you can download the data in other formats directly from the survey website: https://www.worldvaluessurvey.org/WVSDocumentationWV7.jsp.\nDownload the .rds version of the data file form here: https://cgmoreh.github.io/HSS8005-24/data/wvs7.rds\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to download the file in the same folder where your R script/Quarto file is located, so you can import it easily, without complications cause by directory paths (see below)\n\n\nOnce the dataset is downloaded, you can import it into R. Because the downloaded data file is in the .rds format, you can navigate to the file either from within RStudio’s Files pane, or manually in Windows Explorer, and double-click the file to open. However, this is not a recommended way of opening a file, because you want to have a record of the action in your R script for the future.\nYou can load datasets saved in the .rds format using the readRDS() command. If your dataset is in another format, you can check out the {readr} package (for rectangular data such as .csv (comma separated values) or .tsv (tab separated values)), {readxl} (for Excel data), and {sjlabelled} (for SPSS, Stata and SAS formats).\nThe more generic function data_read() from {easystats}’s {datawizard} package loads data from various formats based on the source files extension, including files from internet sources or compressed files. It relies on the {rio} package, which provides similar functionality.\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that by default the data_read() function assumes that numeric variables where all values have a value label are categorical and will convert them into factors. That means that all the numeric “values” will be replaced by the “value labels” (e.g. 1=“Yes”/ 2=“No” will become simply “Yes”/“No”). This is usually a reasonable default behaviour, because the majority of functions in R do not handle “value labels” and working with textual (character string) values can be more explicit. However, this may be less appropriate when the dataset contains many long ordered variables (such as 0-10 scale items), as we will most likely want to treat such variables as numeric in statistical models. To cancel this default behaviour, we can add the additional argument convert_factors = FALSE. This is also the format that gets imported when using readRDS(). However, most of the common tabulation and graphing functions will not show the category “labels” in the output either, and for that purpose having variables “converted to factors” (with the original “Values” overwritten by the “Value labels”) may be a better option. Below we will import the data with factors converted, as we will focus on tabulation and plotting.\n\n\nIf you have saved the dataset into the same folder where your analysis script/Quarto file lives, you can import it by specifying just the name of the dataset. If it’s in a sub-folder or a different location on the computer, you need to include a full path to the dataset, like in the example below:\n\nwvs7data &lt;- readRDS(\"D:/HSS8005/MyData/wvs7.rds\")\n\nIn the code above, I am assigning (with the assignment operator &lt;-) the data to an object I called “wvs7data”, but I could have given it any other name as long as it follows R’s naming conventions (no spaces, avoid special characters; see also recommended naming strategies in the tidyverse style guide). The object will appear in the Environment tab (on the bottom right pane).\n\n\n\n\n\n\nWarning\n\n\n\nWorking with folders and paths\nIf the data file is not in the folder where you main script (the one that does the importing) is, you will need to specify either a relative path from the script to the data file, or an absolute path from the home/working directory.\nCopy/pasting paths on Windows computers\nAn easy way to get the path to the data file is to navigate there on your computer, copy the path, and paste it into your R script. However, there are some complications with this procedure when using a Windows PC. My path above would have copied as D:\\HSS8005\\MyData\\wvs7.rds, but R does not recognise back-slashes as path elements because in R the backslash has a special meaning. You must manually replace backslashes with either forward slashes or double-backslashes (D:\\\\HSS8005\\\\MyData\\\\wvs7.rds).\nAnother option is to use the function readClipboard(), which pastes into R whatever text you have on your clipboard (after copying it) using double backslashes. For example, you can copy a path to the folder where the data is located, then add the filename to the end of the text string using the paste0() function to get a working path to the file you want to load.\nYou can check:\n\n# First, copy the path to your data folder on your computer\n# Check the output:\n\npaste0(readClipboard(), \"/wvs7.rds\")\n\nThe file in the path can then be imported as normal:\n\nwvs7data &lt;- data_read(paste0(readClipboard(), \"/wvs7.rds\"))\n\nUsing the {here} package\nWorking with paths, folders, directories in a sustainable and robust way can be a challenge. The {here} package provides some useful options if you are working within R project directories. By loading the here library, you establish the working directory to be the root folder of your R project (i.e. the folder where the .Rproj file is located), and you can easily construct paths to any file within that project by listing the folders that contain it relative to the project root. This works similarly on all operating systems, and it’s as easy as:\n\nlibrary(here)\n\nwvs7data &lt;- readRDS(here(\"HSS8005\", \"MyData\", \"wvs7.rds\"))\n\nYou can read more about the package in the “R for Social Scientists” course.\n\n\nWe can look at the dataset object in the Environment pane. If we click on the blue button with the white arrow before the name of the object, a list of variables and other information about them will roll down. If we click on the object’s name or info, the dataset will open in the Sources pane, just next to the R script file. This is equivalent to having run the following command:\n\nView(wvs7data)    \n\nNote the capital “V”; R is case-sensitive, so always pay attention; view(wvs7data) won’t work.\nYou can explore the dataset a bit. Only the first 50 columns (i.e. variables) are displayed, to see the next 50 you can click on arrow (&gt;) in the dataset window’s toolbar. Once you’ve had a quick look, you can close that view or return to the R script.",
    "crumbs": [
      "Materials",
      "Week 2",
      "Notes"
    ]
  },
  {
    "objectID": "data/index.html",
    "href": "data/index.html",
    "title": "Data documentation",
    "section": "",
    "text": "Datasets used for lab exercises.\n\n\n\n\n\n\n Trust & Inequality\n\n\n\n\n\nThis dataset combines data on “generalised/social trust” from the latest waves of the World Values Survey and the European Values Study with macro(country)-level data on World Development Indicators (WDI) provided by the World Bank. The main variables of interest taken from the WDI refer to measurements of economic inequality within countries. The dataset allows the conceptual replication of the analysis presented in Chapter 4 (“Community life and social relations”, pp. 49-62) of Wilkinson and Pickett (2010) concerning the relationship between inequality and trust\n Download .rds  Download .dta  Download .csv  Data wrangling code (.R)\n\n\n\n\n\n\n\n\n\n Österman, Table 3\n\n\n\n\n\nThis dataset is the one used by Österman (2021) for the analysis underpinning the results reported in his Table 3 and related tables in the Online Supplementary Material. The aim of the article is to use information on educational reforms across European countries as a way to set up a quasi-experimental design testing the effect of education on social trust. With this approach, it aims to overcome the limitations of cross-sectional observational survey data from the European Social Survey by attempting a causal - rather than just correlational - explanation.\n Download\n\n\n\n\n\n\n\n\n\n Delhey & Newton, 2003\n\n\n\n\n\nThis dataset contains data from the EUROMODULE (1999-2002) surveys conducted in nine countries: Germany (DE) | Austria (AT) | Switzerland (CH) | Sweden (SE) | Spain (ES) | Slovenia (SI) | Korea, Republic of (KR) | Turkey (TR) | Hungary (HU). Out of the total of 366 variables measured, only those 100 were kept in this dataset that were used by Delhey and Newton (2003) in their analysis of the various correlates of “social trust”. The value of the EUROMODULE survey data compared to other comparative surveys that measure social trust is that it offers a much greater variety of explanatory variables that allow Delhey and Newton (2003) to test the relative explanatory power of several complex social theories explaining differences in levels of social trust both at the individual level and at the macro-social level.\n Download \n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nDelhey, Jan, and Kenneth Newton. 2003. “Who Trusts?: The Origins of Social Trust in Seven Societies.” European Societies 5(2):93–137. doi: 10.1080/1461669032000072256.\n\n\nÖsterman, Marcus. 2021. “Can We Trust Education for Fostering Trust? Quasi-experimental Evidence on the Effect of Education and Tracking on Social Trust.” Social Indicators Research 154(1):211–33. doi: 10.1007/s11205-020-02529-y.\n\n\nWilkinson, Richard G., and Kate Pickett. 2010. The Spirit Level: Why Greater Equality Makes Societies Stronger. New York: Bloomsbury Press."
  },
  {
    "objectID": "materials/slides/example.html#not-outline-just-simple-dice",
    "href": "materials/slides/example.html#not-outline-just-simple-dice",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Not outline, just simple dice",
    "text": "Not outline, just simple dice\n\n\none\ntwo\nthree"
  },
  {
    "objectID": "materials/slides/example.html#numbered",
    "href": "materials/slides/example.html#numbered",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Numbered",
    "text": "Numbered\n\n\nGaming chance\nsecond topic\nThird topic\nForth topic"
  },
  {
    "objectID": "materials/slides/example.html#not-numbered",
    "href": "materials/slides/example.html#not-numbered",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Not numbered",
    "text": "Not numbered\n\n\nGaming chance\nsecond topic\nThird topic\nForth topic"
  },
  {
    "objectID": "materials/slides/example.html#numbered-small",
    "href": "materials/slides/example.html#numbered-small",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Numbered small",
    "text": "Numbered small\n\n\nGaming chance\nsecond topic\nThird topic\nForth topic"
  },
  {
    "objectID": "materials/slides/example.html#not-numbered-small",
    "href": "materials/slides/example.html#not-numbered-small",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Not numbered small",
    "text": "Not numbered small\n\n\nGaming chance\nsecond topic\nThird topic\nForth topic"
  },
  {
    "objectID": "materials/slides/example.html#just-text",
    "href": "materials/slides/example.html#just-text",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Just text",
    "text": "Just text\n\nSomething like a text here\n\nThis is my first line and it’s a very long line so that I can check how it looks like when it is printed on the slide and there are other lines below too\nThis is the second line\nAnd a third line here\n\nMore here\n\nFifth line\nSixth line"
  },
  {
    "objectID": "materials/slides/example.html#code",
    "href": "materials/slides/example.html#code",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Code",
    "text": "Code\n\n\na &lt;- rnorm(100, 4, 2)\nsummary(a)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n -1.136   2.381   3.908   3.942   5.448   8.595 \n\n\n\n\nhist(a)"
  },
  {
    "objectID": "materials/slides/example.html#testing",
    "href": "materials/slides/example.html#testing",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Testing",
    "text": "Testing\n\n\nTesting\n\n\nhow\n\n\nfragments work in\n\n\nreality"
  },
  {
    "objectID": "materials/slides/example.html#testing-2",
    "href": "materials/slides/example.html#testing-2",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Testing 2",
    "text": "Testing 2\n\nTesting\n. . .\nHow\n. . .\nfragments work\n. . .\nreally"
  },
  {
    "objectID": "materials/slides/example.html#statistics",
    "href": "materials/slides/example.html#statistics",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Statistics",
    "text": "Statistics\n\nand the state\n\n\nstatshistory\n\n\n\n1660\n\nHermann Conring \n (1606–1681)\n\n1660\n\n'statisticum'; political science lectures on European states, \n quantifying and comparing their finances, population, agriculture, etc.\n\nbotero\n\nGiovanni Botero \n (c. 1544–1617)\n\n'Della ragion di Stato' ~ 'Reason of State'\n\n\n\n\n\n\n1672\n\nHelenus Politanus (pse.)\n\n1672\n\n'Microscopium Statisticum'\n\nghilini\n\nGirolamo Ghilini \n (1589–1668)\n\n'Ristretto della civile, politica, statistica e militare scienza'\n\n\n\n\n1748\n\nGottfried Achenwall \n (1719–1772)\n\n1748\n\n'Vorbereitung zur Staatswissenschaft'; 'Statistik'\n\n\n\n1660-&gt;1672\n\n\n\n\nsittewald\n\nPhilander Von Sittewald \n (1601–1669)\n\n'statista' ~ 'someone versed in the knowledge of the state'\n\n\n1725\n\nMartin Schmeitzel \n (1679–1747)\n\n1725\n\n'collegium statisticum' ~ 'council of state'\n\n\n1660-&gt;1725\n\n\n\n\n\n\n\n\n\n\n1725-&gt;1748\n\n\n\n\n\n\n\npetty\n\nWilliam Petty \n (1623-1687)\n\n1672\n\n'political arithmetic'; 'Essays in Political Arithmetick \n and Political Survey or Anatomy of Ireland'\n\n\n\nsuss\n\nJohann Peter Süssmilch \n (1707-1767)\n\n1761-1762\n\n'The Divine order in the changes in the human sex from birth, \n death and reproduction of the same'\n\n\n\n\n\n\ngraunt\n\nJohn Graunt \n (1620–1674)\n\n1663\n\n'Natural and Political Observations \n Made upon the Bills of Mortality'"
  },
  {
    "objectID": "materials/slides/example.html#statistics-1",
    "href": "materials/slides/example.html#statistics-1",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Statistics",
    "text": "Statistics\nand probability\n\n\n\nStatistics as the mathematical science of using probability to describe uncertainty"
  },
  {
    "objectID": "materials/slides/example.html#gaming-chance",
    "href": "materials/slides/example.html#gaming-chance",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Gaming chance",
    "text": "Gaming chance\n\n\n\nWe may never know when humans started playing games of chance, but archaeological findings suggest it was a rather long time ago\nDuring the the First Dynasty in Egypt (c. 3500 B.C.) variants of a game involving astragali (small bones in the ankle of an animal) were already documented\nOne of the chief games may have been the simple one of throwing four astragali together and noting which sides fell uppermost"
  },
  {
    "objectID": "materials/slides/example.html#ālea-iacta-est",
    "href": "materials/slides/example.html#ālea-iacta-est",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Ālea iacta est",
    "text": "Ālea iacta est\n\n\n\nThe six-sided die we know today may have been obtained from the astragalus by grinding it down until it formed a rough cube\nDice became common in the Ptolemaic dynasty (300 to 30 B.C.)\nThere is evidence that dice were used for divination rites in this period - one carried the sacred symbols of Osiris, Horus, Isis, Nebhat, Hathor and Horhudet engraved on its six sides\nIn Roman times, rule by divination attained great proportions; Emperors Septimius Severus (Emperor A.D. 193-211) and Diocletian (Emperor AD. 284-305) were notorious for their reliance on the whims of the gods"
  },
  {
    "objectID": "materials/slides/example.html#fat-chance",
    "href": "materials/slides/example.html#fat-chance",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Fat chance",
    "text": "Fat chance\n\n\nHe threw four knucklebones on to the table and committed his hopes to the throw. If he threw well, particularly if he obtained the image of the goddess herself, no two showing the same number, he adored the goddess, and was in high hopes of gratifying his passion; if he threw badly, as usually happens, and got an unlucky combination, he called down imprecations on all Cnidos, and was as much overcome by grief as if he had suffered some personal loss.\nLucian of Samosata (c. 125 – 180), writing in his trademark satirical style about a young man who fell in love with Praxiteles’s Aphrodite of Knidos; cited in F. N. David (1955:8)"
  },
  {
    "objectID": "materials/slides/example.html#chance-with-limitations",
    "href": "materials/slides/example.html#chance-with-limitations",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Chance with limitations",
    "text": "Chance with limitations\n\n\n\n\nDice were sometimes faked. Sometimes numbers were left off or duplicated; hollow dice have been found dating from Roman time\nDice were also imperfect; a fair die was the exception rather than the rule\nExperiment by F. N. David using three dice from the British Museum:"
  },
  {
    "objectID": "materials/slides/example.html#exercise",
    "href": "materials/slides/example.html#exercise",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Exercise",
    "text": "Exercise\n\n\nWhich of the three dice (if any) would you call fair?\nWhat distribution of outcomes would you expect 204 fair dice rolls to produce prior to seeing any results?\nHow would you expect that distribution to change as the number of rolls progresses towards \\(\\infty\\)?\nWhat name would you give to that distribution?\nverv\nrever"
  },
  {
    "objectID": "materials/slides/example.html#from-chance-to-probability",
    "href": "materials/slides/example.html#from-chance-to-probability",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "From chance to probability\n",
    "text": "From chance to probability\n\n\n\n\nUntil 18th century people had mostly used probability to solve problems about dice throwing and other games of chance\nJacob (Jacques/James) Bernoulli (1654/1655-1705), a Swiss mathematician trained as a theologian and ordained as a minister of the Reformed church in Basel, began asking questions about probabilistic inference instead\nHis work focused on the mathematics of uncertainty - what he came to call stochastics (from the Greek word \\(στόχος\\) [stókhos] meaning to aim or “guess’)\n\nArs Conjectandi (The Art of Conjecturing) - published posthumously in 1713"
  },
  {
    "objectID": "materials/slides/example.html#inferential-questions",
    "href": "materials/slides/example.html#inferential-questions",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Inferential questions",
    "text": "Inferential questions\n\n\n\nSuppose you are presented with a large urn full of tiny white and black pebbles, in a ratio that’s unknown to you. You begin selecting pebbles from the urn and recording their colors, black or white. How do you use these results to make a guess about the ratio of pebble colors in the urn as a whole?\n\n\nBernoulli’s solution: if you take a large enough sample, you can be very sure, to within a small margin of absolute certainty, that the proportion of white pebbles you observe in the sample is close to the proportion of white pebbles in the urn.\nA first version of the Law of Large Numbers"
  },
  {
    "objectID": "materials/slides/example.html#large-numbers",
    "href": "materials/slides/example.html#large-numbers",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Large numbers",
    "text": "Large numbers\n\n\nBernoulli’s solution, more technically:  For any given \\(\\epsilon\\) &gt; 0 and any \\(s\\) &gt; 0, there is a sample size \\(n\\) such that, with \\(w\\) being the number of white pebbles counted in the sample and \\(f\\) being the true fraction of white pebbles in the urn, the probability of \\(w/n\\) falling between \\(f − \\epsilon\\) and \\(f + \\epsilon\\) is greater than \\(1 − s\\).\nthe fraction \\(w/n\\) is the ratio of white to total pebbles we observe in our sample\n\\(\\epsilon\\) (epsilon) captures the fact that we may not see the true urn ratio exactly thanks to random variation in the sample; larger samples help assure that we get closer to the true value, but uncertainty alwa ys remains\n\\(s\\) reflects just how sure we want to be; for example, set \\(s\\) = 0.01 and be 99% percent sure.\nmoral certainty as distinct from absolute certainty of the kind logical deduction provides"
  },
  {
    "objectID": "materials/slides/example.html#final-slides",
    "href": "materials/slides/example.html#final-slides",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "Final slides",
    "text": "Final slides"
  },
  {
    "objectID": "materials/slides/example.html#references",
    "href": "materials/slides/example.html#references",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n            Quantitative analysis \n        ",
    "section": "",
    "text": "Quantitative analysis \n        \n        \n            HSS8005 • Intermediate stream • 2024/2025 Winter/Spring\nNewcastle University (UK)\n        \n        \n            A continuation course in applied statistics and probability for the understanding of society and culture. It is aimed at an interdisciplinary postgraduate audience in the social sciences and humanities. Focusing on real-life examples from published research, the course emphasizes the scientific application of regression models, the practice of reproducible research workflows, and the communication of statistical results to diverse audiences. It prioritises understanding through modern computational techniques over mathematical abstraction.\n            Join the mailing list\n        \n    \n\n\n\n\n\n\nModule leader\n\n   Dr. Chris Moreh\n   HDB.4.106\n   chris.moreh at newcastle dot ac dot uk\n   Tutorial booker\n \n\n\n\nTeaching Assistants\n\n   Minki Sung\n\n\n\n\n\nTimetable\n\n   Tuesdays, Timetable Weeks 22-29\n    HDB.6.19 PGR Learning Lab\n   Lectures: 11:00-12:30\n   Labs: 13:00-14:30 \n\n\n\nAssessment\n\n   4,000-word data analysis portfolio/report (details on Canvas)\n   Submit by 16:00 on 30th April 2025\n   Submit to Turnitin via Canvas\n\n\n\n\n\n\nModule overview\nThis module is offered by School X - Researcher Education and Development to postgraduate students within the Faculty of Humanities and Social Sciences at Newcastle University. The module aims to provide a broad applied introduction to more advanced methods in quantitative analysis for students from various disciplinary backgrounds. See the module plan page for details about the methods covered. The course content consists of eight 1.5-hour lectures and eight 1.5-hour IT labs.\nThe course stands on three pillars:\n\n\nApplication\n\n\nComputation\n\n\nReproducibility\n\n\n\n\nApplication: we will work with real data originating from large-scale representative surveys or published research, with the aim of applying methods to concrete research scenarios. IT lab exercises will involve reproducing small bits of published research, using the data and (critically) the modelling approaches used by the authors. The aim is to see how methods have been used in practice in various disciplines and learn how to reproduce (and potentially improve) those analyses. This will then enable students to apply this knowledge to their own research questions. The data used in IT labs may be cleansed to allow focusing more on modelling tasks than on data wrangling, but exercises will address some of the more common data manipulation challenges and will cover essential functions. Data cleansing scripts will also be provided so that interested students can use them in their own work.\n\n\n\n\nComputation: the development of computational methods underpins the application of the most important statistical ideas of the past 50 years (see Andrew Gelman’s article on these developments here or an online workshop talk here; Richard McElreath’s great talk on Science as Amateur Software Development is well worth watching too). This module aims to develop basic computational skills that allow the application of complex statistical models to practical scientific problems without advanced mathematical knowledge, and which lay the foundation on which students can then pursue further learning and research in computational humanities and social sciences.\n\n\n\n\nReproducibility: developing a reproducible workflow that allows your future self or a reviewer of your work to understand your process of analysis and reproduce your results is essential for reliable and transparent scientific research. For an overview of why it’s important to develop a reproducible workflow early on in your research career and how to do it using (some) of the tools employed in this module, read Chapter 3 of TSD (see Resources &gt; Readings). In this course, we will be using a suite of well-integrated free and open-source software to aid our reproducible workflow (see Resources &gt; Software).\n\n\n\n\nPrerequisites\nTo benefit the most from this module, students are expected to have a foundational level of knowledge in quantitative methods: a good understanding of data types and distributions, familiarity with inferential statistics, and some exposure to linear regression. This is roughly equivalent to the content covered in a textbook such as OpenIntro Statistics (which you can download for free).\n\n\nNo previous knowledge of  or other command-based statistical analysis software is needed, but if starting from scratch, students are advised to complete the self-paced R for Social Scientists Data Carpentry course outside class and to consult Wickham, Çetinkaya-Rundel and Grolemund’s ebook R for Data Science.\n\n\n\nCopyright  Chris Moreh, 2025."
  },
  {
    "objectID": "materials/index.html",
    "href": "materials/index.html",
    "title": "Materials",
    "section": "",
    "text": "Materials for each week are available from the side menu. The table below outlines the weekly topics.\n\n\n\n\n\nWeekly topics\n\n\n\n\n\n\n\n\nWeek 1  Tools\n\n\nR, RStudio, Markdown, Quarto and other tools of the trade\n\n\n\n\nWeek 2  Lines\n\n\nLinear models and their limitations\n\n\n\n\nWeek 3  Curves\n\n\nLogistic regression and other generalised linear models\n\n\n\n\nWeek 4  Paths\n\n\nGraphical models and considerations for causal analysis\n\n\n\n\nWeek 5  Interactions\n\n\nEstimating, plotting and interpreting interaction effects\n\n\n\n\nWeek 6  Temporalities\n\n\nPanel, longitudinal and time-series analysis\n\n\n\n\nWeek 7  Hierarchies\n\n\nHierarchical data structures and multilevel modelling\n\n\n\n\nWeek 8  Designs\n\n\nSimulation-based power analysis for study design\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Materials",
      "Weekly materials"
    ]
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\n\n\n\n\n \n\n\n \n\n\n\n\nWeek 1  Introduction\n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n \n\n\n \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "info/week7.html",
    "href": "info/week7.html",
    "title": "Week 7  Hierarchies",
    "section": "",
    "text": "Hierarchical data are ubiquitous in the social and human sciences (and beyond). In fact, almost all the application articles we have engaged with so far in previous labs modelled hierarchical data., and almost all modelled them explicitly as such, applying some multilevel modelling technique. In some cases the hierarchies themselves were of central theoretical importance and played a crucial role in the stated estimand (i.e. “the object of inquiry—(…) the precise quantity about which we marshal data to draw an inference” (see Lundberg, Johnson, and Stewart 2021:532). In others, taking into account the hierarchical nature of the data was meant to improve the precision of the main effect estimates. The importance of accounting for hierarchical dependencies in our models is emphasised by no one else more than Richard McElreath, who, in his important introductory-level book to Bayesian statistics, wants “to convince the reader of something that appears unreasonable: multilevel regression deserves to be the default form of regression” (McElreath 2020:15). According to him, “papers that do not use multilevel models should have to justify not using a multilevel approach”. In this session, we will learn how to think about and fit hierarchical models in R, and we’ll discuss some of the challenges of multilevel modelling and the possible justifications not to use them in certain contexts.\n\nReadings\nTextbook\n\nARM: Chapters 11 (pp. 237-249) and 12 (pp. 251-278)\nTSD: Chapter section 15.2\n\nApplication\n\nÖsterman, Marcus. 2021. ‘Can We Trust Education for Fostering Trust? Quasi-Experimental Evidence on the Effect of Education and Tracking on Social Trust’. Social Indicators Research 154(1):211–33 - (online)\nMitchell, Jeffrey. 2021. “Social Trust and Anti-immigrant Attitudes in Europe: A Longitudinal Multi-Level Analysis.” Frontiers in Sociology 6 (April): 604884 - (online)\nAkaeda, Naoki. 2023. “Trust and the Educational Gap in the Demand for Redistribution: Evidence from the World Values Survey and the European Value Study.” International Sociology 38(3): 290–310 Library access\nWu, Cary. 2021. ‘Education and Social Trust in Global Perspective’. Sociological Perspectives 64(6):1166–86. Available here: Library access\nDingemans, Ellen, and Erik Van Ingen. 2015. ‘Does Religion Breed Trust? A Cross-National Study of the Effects of Religious Involvement, Religious Faith, and Religious Context on Social Trust’. Journal for the Scientific Study of Religion 54(4):739–55. Library access\n\n\n\nFurther readings\n\nARM: Chapters 13 (pp. 279-299), 14 (pp. 301-323) and 15 (pp. 325-342)\n\n\n\n\n\n\nReferences\n\nLundberg, Ian, Rebecca Johnson, and Brandon M. Stewart. 2021. “What Is Your Estimand? Defining the Target Quantity Connects Statistical Evidence to Theory.” American Sociological Review 86(3):532–65. doi: 10.1177/00031224211004187.\n\n\nMcElreath, Richard. 2020. Statistical Rethinking: A Bayesian Course with Examples in R and Stan. Second. Boca Raton: Taylor and Francis, CRC Press.",
    "crumbs": [
      "Materials",
      "Week 7"
    ]
  },
  {
    "objectID": "info/week5.html",
    "href": "info/week5.html",
    "title": "Week 5  Interactions",
    "section": "",
    "text": "Description\nThis week we will return to some of the models we fit over the past two weeks and turn our attention to the right-hand side of the regression equations. We will explore interaction effects, which allow for the association between a predictor and an outcome to depend upon the value of another predictor. Understanding interaction effects - and the concept of conditioning more broadly - can help avoid serious misrepresentations and misunderstandings of our data. Some famous statistical “paradoxes” can highlight these dangers, and the lecture will build on these conceptual examples before moving on to questions of model-building. It is technically very simple to fit models with complex interactions, however, their interpretation can be very difficult. As with the logistic regression model we covered in Week 3, we will explore ways to present and visualise results from interaction models, which make their interpretation easier. Exploring interactions also allows us to begin thinking about causality and causal modelling, a topic that we will expand upon in Week 5.\n\n\nReadings\nStatistics\n\nROS: Chapters 10-12\n\nAdvanced statistics readings\n\nBrambor, T., W. R. Clark, and M. Golder. 2006. “Understanding Interaction Models: Improving Empirical Analyses.” Political Analysis 14(1): 63–82. https://doi.org/10.1093/pan/mpi014\nHainmueller, J., J. Mummolo, and Y. Q. Xu. 2019. “How Much Should We Trust Estimates from Multiplicative Interaction Models? Simple Tools to Improve Empirical Practice.” Political Analysis 27(2): 163–92 Library access here\nRohrer, Julia M., and Ruben C. Arslan. 2021. “Precise Answers to Vague Questions: Issues With Interactions.” Advances in Methods and Practices in Psychological Science 4(2): 25152459211007368 Library access here\n\nCoding\n\nTSD: Chapter 15\n\nApplication\n\nAkaeda, Naoki. 2023. “Trust and the Educational Gap in the Demand for Redistribution: Evidence from the World Values Survey and the European Value Study.” International Sociology 38(3): 290–310 Library access\nÖsterman, Marcus. 2021. ‘Can We Trust Education for Fostering Trust? Quasi-Experimental Evidence on the Effect of Education and Tracking on Social Trust’. Social Indicators Research 154(1):211–33 - (online)\nLadd, Jonathan McDonald, and Gabriel S. Lenz. 2009. ‘Exploiting a Rare Communication Shift to Document the Persuasive Power of the News Media’. American Journal of Political Science 53(2):394–410. doi: 10.1111/j.1540-5907.2009.00377.x.(published version should be accessible with university login; additional Appendix available here)",
    "crumbs": [
      "Materials",
      "Week 5"
    ]
  },
  {
    "objectID": "info/week3.html",
    "href": "info/week3.html",
    "title": "Week 3  Curves",
    "section": "",
    "text": "Description\nIt wasn’t until the last quarter of the 20th century that a unified vision of statistical modelling emerged, allowing practitioners to see how the general linear model we have explored so far is only a specific case of a more general class of models. We could have had a fancy, memorable name for this class of models - as John Nelder, one of its inventors, acknowledged later in life (Senn 2003, 127) - but back then academics were not required to undertake marketing training on the tweetabilty-factor of the chosen names for their theories; so we ended up with “generalised linear models”. These models can be applied to explananda (“explained”, “response”, “outcome”, “dependent” etc. variables, our ys) whose possible values have certain constraints (such as being limited by a lower bound or constrained to discreet choices) that makes the parameters of the Gaussian (‘normal’) distribution inefficient in describing them. Instead, they follow some of the other “exponential distributions” (and not only the exponential: cf. (gelman2020?)), of which the Poisson, gamma, beta, binomial and multinomial are probably the most common in human and social sciences research. Their “generalised linear modelling” involves mapping them unto a linear model using a so-called “link function”. We will explore what all of this means in practice and how it can be applied to data that we are interested in most in our respective fields of study.\n\n\nReadings\nStatistics\n\nROS: Chapters 13-15\nConnelly, Roxanne, Vernon Gayle, and Paul S. Lambert. 2016. ‘Statistical Modelling of Key Variables in Social Survey Data Analysis’. Methodological Innovations 9:205979911663800. Library access\n\nCoding\n\nTSD: Chapter 13\n\nApplication\n\nWu, Cary. 2021. ‘Education and Social Trust in Global Perspective’. Sociological Perspectives 64(6):1166–86. Available here: Library access\nDingemans, Ellen, and Erik Van Ingen. 2015. ‘Does Religion Breed Trust? A Cross-National Study of the Effects of Religious Involvement, Religious Faith, and Religious Context on Social Trust’. Journal for the Scientific Study of Religion 54(4):739–55. Library access\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nSenn, Stephen. 2003. “A Conversation with John Nelder.” Statistical Science 18 (1): 118–31. https://doi.org/10.1214/ss/1056397489.",
    "crumbs": [
      "Materials",
      "Week 3"
    ]
  },
  {
    "objectID": "info/week1.html",
    "href": "info/week1.html",
    "title": "Week 1  Tools",
    "section": "",
    "text": "Description\nWe start the module with an applied introduction to the programming language R and the various tools that we will use to enhance its application to empirical research work in the social sciences. You will only gain a very basic and generic understanding of these software in this first week, but you will learn more throughout the semester, in the form of coding tasks associated with specific data analysis exercises.\n\n\nReadings\nTextbook readings\n\nR4DS: Chapters 1-10 (“Whole game”)\n\nFurther training\nFor further structured training in the use of R, RStudio and RMarkdown/Quarto, see the R for Social Scientists online course provided by Data Carpentry at https://datacarpentry.org/r-socialsci/\nJenny Bryan’s (RStudio/Posit) university-course-originated online book Stat545 is also a great resource for learning R and RStudio in more depth.\nFor a very different approach emphasising the value of learning ‘base’ R over the RStudio + {tidyverse} utility combo, see Norm Matloff’s course fasteR: Fast Lane to Learning R!.",
    "crumbs": [
      "Materials",
      "Week 1"
    ]
  },
  {
    "objectID": "assessment/index.html",
    "href": "assessment/index.html",
    "title": "Formative assessment",
    "section": "",
    "text": "Formative assessment\nStudents can submit their weekly Quarto worksheets with completed exercises by the end of each week for some brief formative feedback that they can build on. The worksheets should contain all the code and a maximum of 500 words of textual interpretation (not including any annotations added in code blocks to explain the code). The submission method and format is TBC; but we’ll take a light approach to things.\n\n\nSummative assessment\nStudents have the option to submit a collection of their (revised) worksheet exercises as a portfolio of work, with an added introduction, conclusion and framing.\nAlternatively, one/several of the covered data analysis methods can be applied to another dataset chosen by the student and developed into a comprehensive research report.\n\n   4,000-word data analysis portfolio/report (details on Canvas)\n   16:00 on 30th April 2025\n   Submit to Turnitin via Canvas\n\nMore detailed information is available on Canvas"
  },
  {
    "objectID": "info/week2.html",
    "href": "info/week2.html",
    "title": "Week 2  Lines",
    "section": "",
    "text": "Description\nIn Edwin Abbott’s 1884 novella, the inhabitants of Flatland are geometric shapes living in a two-dimensional world, incapable of imagining the existence of higher dimensions. A sphere passing through the plain of their world is a fascinating but incomprehensible event: Flatlanders can only see a dot becoming a circle, increasing in circumference, then shrinking back in size and disappearing. There are, in this universe, worlds with even more limited views, like the one-dimensional Lineland and the zero-dimensional Pointland. Any attempt to expand the perspective of their inhabitant(s) is doomed to failure. But as in any good adventure story, a chosen Flatland native embarks on a journey of discovery and revelation - and ostracism and imprisonment. The story is interpreted as an allegorical criticism of Victorian-age social structure, but can equally describe the limitations of inhabiting uncritically a methodological world in which all data are ‘normal’ and all relationships are linear. Moving beyond linearity and acquiring the statistical intuition needed to think in higher dimensions and perceive more complex relationships is indeed a matter of practice-induced revelation. It’s unlikely that we will reach statistical nirvana in this short course, but we’ll attempt to build some more substantial structures upon the arid plains of linear regression. We start by looking around in the Flat-, Line- and Point-lands of quantitative analysis. Incorrigible procrastinators may want to check out a full-length computer animated film version of Flatland on YouTube. Others may be better served by this brief TED-Ed animation.\n\n\nReadings\nStatistics\n\nROS: Chapters 3, 4, 6-12\nTSD: Chapter 12 (“Linear models”)\n\nCoding\n\nTSD: Chapters 9 and 11\nR4DS: Chapters 11, 12\n\nApplication\n\nChapter 4 in Wilkinson, Richard G., and Kate Pickett. 2010. The Spirit Level: Why Greater Equality Makes Societies Stronger. New York: Bloomsbury Press.\nÖsterman, Marcus. 2021. ‘Can We Trust Education for Fostering Trust? Quasi-Experimental Evidence on the Effect of Education and Tracking on Social Trust’. Social Indicators Research 154(1):211–33 - (online)\nMitchell, Jeffrey. 2021. “Social Trust and Anti-immigrant Attitudes in Europe: A Longitudinal Multi-Level Analysis.” Frontiers in Sociology 6 (April): 604884 - (online)",
    "crumbs": [
      "Materials",
      "Week 2"
    ]
  },
  {
    "objectID": "info/week4.html",
    "href": "info/week4.html",
    "title": "Week 4  Paths",
    "section": "",
    "text": "This week we ask some essential conceptual questions that can clarify various stated and unstated assumptions about our empirical data, theoretical questions and the models we aim to fit to them. We’ll explore the possibilities and challenges of asking causal questions of observational data, and we’ll think about ways to avoid what evolutionary anthropologist Richard McElreath calls ‘causal salad’. More generally, we explore ways of thinking about and dealing with the various biases that affect quantitative analyses.\n\nReadings\nStatistics\n\nCinelli, Carlos, Andrew Forney, and Judea Pearl. 2022. “A Crash Course in Good and Bad Controls.” Sociological Methods & Research https://journals.sagepub.com/doi/full/10.1177/00491241221099552\nLundberg, Ian, Rebecca Johnson, and Brandon M. Stewart. 2021. “What Is Your Estimand? Defining the Target Quantity Connects Statistical Evidence to Theory.” American Sociological Review 86(3): 532–65. https://doi.org/10.1177/00031224211004187\nROS: Chapters 18-20\n\nApplication\n\nGriffith, Gareth J., Tim T. Morris, Matthew J. Tudball, Annie Herbert, Giulia Mancano, Lindsey Pike, Gemma C. Sharp, Jonathan Sterne, Tom M. Palmer, George Davey Smith, Kate Tilling, Luisa Zuccolo, Neil M. Davies, and Gibran Hemani. 2020. “Collider Bias Undermines Our Understanding of COVID-19 Disease Risk and Severity.” Nature Communications 11(1): 5749. https://www.nature.com/articles/s41467-020-19478-2\nBreen, Richard. 2018. “Some Methodological Problems in the Study of Multigenerational Mobility.” European Sociological Review 34(6): 603–11. https://doi.org/10.1093/esr/jcy037",
    "crumbs": [
      "Materials",
      "Week 4"
    ]
  },
  {
    "objectID": "info/week6.html",
    "href": "info/week6.html",
    "title": "Week 6  Temporalities",
    "section": "",
    "text": "We consider the “temporal” aspects of data and the opportunities (and challenges) they pose. The special kind of multilevel data structure we consider here involves repeated measurements on persons (or other units); measurements are therefore clustered within persons (or other units), and predictors can be available at the measurement or person level. Such datasets are often called panel or longitudinal. In settings where overall time trends are important, repeated measurement data are sometimes called time-series cross-sectional. Time-series cross-sectional data typically contain observations at regular time interval, and they commonly exhibit overall time patterns. In many such contexts one must consider how measurements cluster not only in the “temporal” variable but also in the “spatial” variable (e.g. country-year-level observations clustered within countries as well as years), with the potential for predictors at three levels (individual, temporal and spatial). We will consider such three (and higher)-level hierarchical analyses.\n\nReadings\nTextbook\n\nARM: Chapters 11 (pp. 237-249) and 12 (pp. 251-278)\n\nApplication\n\nMitchell, Jeffrey. 2021. “Social Trust and Anti-immigrant Attitudes in Europe: A Longitudinal Multi-Level Analysis.” Frontiers in Sociology 6 (April): 604884 - (online)\nKumove, Michael. 2024. “Take Five? Testing the Cultural and Experiential Theories of Generalised Trust Against Five Criteria.” Political Studies (online)\nDawson, Chris. 2019. “How Persistent Is Generalised Trust?” Sociology 53(3): 590–99. (online)\nBotzen, Katrin. 2015. “Are Joiners Trusters? A Panel Analysis of Participation and Generalized Trust.” Zeitschrift für Soziologie 44(5): 314–29. (online)\nSturgis, Patrick, Roger Patulny, Nick Allum, and Franz Buscha. 2012. Social Connectedness and Generalized Trust: A Longitudinal Perspective. Working Paper. ISER Working Paper Series. (online)",
    "crumbs": [
      "Materials",
      "Week 6"
    ]
  },
  {
    "objectID": "info/week8.html",
    "href": "info/week8.html",
    "title": "Week 8  Designs",
    "section": "",
    "text": "We’ll practice some basic methods of computer simulation in R for statistical inference and for generating data that has some idealised characteristics. Such methods play an increasingly important role in computational statistics and are extremely useful for designing robust data collection and analysis plans. Of course, this topic also raises some much deeper existential issues. We have known ever since science-fiction author Philip K. Dick’s memorable “Metz address” of 1977 that our world is nothing but a complex computer simulation. We won’t be actively searching for empirical proof of this in class, but should we make a mistake in our code and end up in an infinite loop, we may be tempted to ponder whether if something like this can happen to our data, who says it couldn’t happen to us? If it happens and you’re afraid that stopping the process may cause the known universe to implode, you can watch Dick on YouTube while you wait.\n\nReadings\n\nROS: Chapters 5 (pp. 69-76) and 16 (pp. 291-310)\nTSD: TDS makes extensive use of simulation methods for various purposes at different stages of a research project (e.g. from data preparation through statistical inference to sharing results and data openly). A search on a keyword stub “simulat” can point you various sections of interest that are all worth reading.",
    "crumbs": [
      "Materials",
      "Week 8"
    ]
  },
  {
    "objectID": "materials/handouts/index.html",
    "href": "materials/handouts/index.html",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\nReading Time\n\n\n\n\n\n\nWeek 1 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 2 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 3 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 4 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 5 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 6 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 7 handout\n\n\n \n\n\n1 min\n\n\n\n\nWeek 8 handout\n\n\n \n\n\n1 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "materials/notes/Bibliography.html",
    "href": "materials/notes/Bibliography.html",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "",
    "text": "References\n\n\nAkaeda, Naoki. 2023. “Trust and the Educational Gap in the Demand for Redistribution: Evidence from the World Values Survey and the European Value Study.” International Sociology 38(3):290–310. doi: 10.1177/02685809231167834.\n\n\nBerry, W. D., M. Golder, and D. Milton. 2012. “Improving Tests of Theories Positing Interaction.” Journal of Politics 74(3):653–71. doi: 10.1017/S0022381612000199.\n\n\nBlock, Ray Jr, Matt Golder, and Sona N. Golder. 2023. “Evaluating Claims of Intersectionality.” The Journal of Politics. doi: 10.1086/723813.\n\n\nBollen, Kenneth A. 1989. Structural Equations with Latent Variables. New York: Wiley.\n\n\nBrambor, T., W. R. Clark, and M. Golder. 2006. “Understanding Interaction Models: Improving Empirical Analyses.” Political Analysis 14(1):63–82. doi: 10.1093/pan/mpi014.\n\n\nCheah, B. 2009. “Clustering Standard Errors or Modeling Multilevel Data ?”\n\n\nClark, William Roberts, and Matt Golder. 2023. Interaction Models: Specification and Interpretation. Cambridge: Cambridge University Press.\n\n\nConnelly, Roxanne, Vernon Gayle, and Paul S. Lambert. 2016. “Modelling Key Variables in Social Science Research: Introduction to the Special Section.” Methodological Innovations 9:2059799116637782. doi: 10.1177/2059799116637782.\n\n\nDavid, F. N. 1955. “Studies in the History of Probability and Statistics i. Dicing and Gaming (a Note on the History of Probability).” Biometrika 42(1/2):1–15. doi: 10.2307/2333419.\n\n\nDelhey, Jan, and Kenneth Newton. 2003. “Who Trusts?: The Origins of Social Trust in Seven Societies.” European Societies 5(2):93–137. doi: 10.1080/1461669032000072256.\n\n\nDingemans, Ellen, and Erik Van Ingen. 2015. “Does Religion Breed Trust? A Cross-National Study of the Effects of Religious Involvement, Religious Faith, and Religious Context on Social Trust.” Journal for the Scientific Study of Religion 54(4):739–55. doi: 10.1111/jssr.12217.\n\n\nEjrnæs, Anders, and Mads Dagnis Jensen. 2021. “Go Your Own Way: The Pathways to Exiting the European Union.” Government and Opposition 1–23. doi: 10.1017/gov.2020.37.\n\n\nEl-Shagi, Makram, and Alexander Jung. 2015. “Have Minutes Helped Markets to Predict the MPC’s Monetary Policy Decisions?” European Journal of Political Economy 39:222–34. doi: 10.1016/j.ejpoleco.2015.05.004.\n\n\nEmerson, Robert M., Rachel I. Fretz, and Linda L. Shaw. 2011. Writing Ethnographic Fieldnotes. 2nd ed. Chicago: The University of Chicago Press.\n\n\nGalton, Francis. 1886. “Regression Towards Mediocrity in Hereditary Stature.” The Journal of the Anthropological Institute of Great Britain and Ireland 15:246–63. doi: 10.2307/2841583.\n\n\nGelman, Andrew, Jennifer Hill, and Aki Vehtari. 2020. Regression and other stories. Cambridge: Cambridge University Press.\n\n\nGelman, Andrew, and Aki Vehtari. 2021. “What Are the Most Important Statistical Ideas of the Past 50 Years?” Journal of the American Statistical Association 116(536):2087–97. doi: 10.1080/01621459.2021.1938081.\n\n\nGerson, Kathleen, and Sarah Damaske. 2020. The Science and Art of Interviewing. New York: Oxford University Press.\n\n\nGërxhani, Klarita, Nan D. de Graaf, and Werner Raub, eds. 2022. Handbook of Sociological Science: Contributions to Rigorous Sociology. Cheltenham, UK ; Northmapton, MA, USA: Edward Elgar Publishing.\n\n\nGoldthorpe, John H. 2016. Sociology as a Population Science. Cambridge: Cambridge University Press.\n\n\nHainmueller, Jens. 2012. “Entropy Balancing for Causal Effects: A Multivariate Reweighting Method to Produce Balanced Samples in Observational Studies.” Political Analysis 20(1):25–46. doi: 10.1093/pan/mpr025.\n\n\nHainmueller, J., J. Mummolo, and Y. Q. Xu. 2019. “How Much Should We Trust Estimates from Multiplicative Interaction Models? Simple Tools to Improve Empirical Practice.” Political Analysis 27(2):163–92. doi: 10.1017/pan.2018.46.\n\n\nKara, Helen. 2015. Creative research methods in the social sciences: a practical guide. Bristol: Policy press.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27(2):97–111. doi: 10.1093/comjnl/27.2.97.\n\n\nLadd, Jonathan McDonald, and Gabriel S. Lenz. 2009. “Exploiting a Rare Communication Shift to Document the Persuasive Power of the News Media.” American Journal of Political Science 53(2):394–410. doi: 10.1111/j.1540-5907.2009.00377.x.\n\n\nLord, R. D. 1958. “Studies in the History of Probability and Statistics.: VIII. De Morgan and the Statistical Study of Literary Style.” Biometrika 45(1/2):282–82. doi: 10.2307/2333072.\n\n\nLundberg, Ian, Rebecca Johnson, and Brandon M. Stewart. 2021. “What Is Your Estimand? Defining the Target Quantity Connects Statistical Evidence to Theory.” American Sociological Review 86(3):532–65. doi: 10.1177/00031224211004187.\n\n\nMcElreath, Richard. 2020. Statistical Rethinking: A Bayesian Course with Examples in R and Stan. Second. Boca Raton: Taylor and Francis, CRC Press.\n\n\nMcElreath, Richard, and Paul E. Smaldino. 2015. “Replication, Communication, and the Population Dynamics of Scientific Discovery.” PLOS ONE 10(8):e0136088. doi: 10.1371/journal.pone.0136088.\n\n\nMcNeish, Daniel, Laura M. Stapleton, and Rebecca D. Silverman. 2017. “On the Unnecessary Ubiquity of Hierarchical Linear Modeling.” Psychological Methods 22(1):114–40. doi: 10.1037/met0000078.\n\n\nMehmetoglu, Mehmet, and Matthias Mittner. 2021. Applied Statistics Using R: A Guide for the Social & Natural Sciences. First. Thousand Oaks: SAGE Publications.\n\n\nMitchell, Jeffrey. 2021b. “Social Trust and Anti-Immigrant Attitudes in Europe: A Longitudinal Multi-Level Analysis.” Frontiers in Sociology 6.\n\n\nMitchell, Jeffrey. 2021a. “Social Trust and Anti-immigrant Attitudes in Europe: A Longitudinal Multi-Level Analysis.” Frontiers in Sociology 6:604884. doi: 10.3389/fsoc.2021.604884.\n\n\nMulvin, Dylan. 2021. Proxies: The Cultural Work of Standing in. Cambridge, Massachusetts: The MIT Press.\n\n\nNeuman, W. Lawrence. 2014. Social research methods: qualitative and quantitative approaches. 7. ed., Pearson new internat. ed. Harlow: Pearson.\n\n\nÖsterman, Marcus. 2021. “Can We Trust Education for Fostering Trust? Quasi-experimental Evidence on the Effect of Education and Tracking on Social Trust.” Social Indicators Research 154(1):211–33. doi: 10.1007/s11205-020-02529-y.\n\n\nSenn, Stephen. 2003. “A Conversation with John Nelder.” Statistical Science 18(1):118–31. doi: 10.1214/ss/1056397489.\n\n\nSpiegelhalter, D. J. 2020. The Art of Statistics: Learning from Data. Paperback edition. UK: Pelican Books.\n\n\nValentino, Nicholas A., Stuart N. Soroka, Shanto Iyengar, Toril Aalberg, Raymond Duch, Marta Fraile, Kyu S. Hahn, Kasper M. Hansen, Allison Harell, Marc Helbling, Simon D. Jackman, and Tetsuro Kobayashi. 2019. “Economic and Cultural Drivers of Immigrant Support Worldwide.” British Journal of Political Science 49(4):1201–26. doi: 10.1017/S000712341700031X.\n\n\nWeiss, Alexa, Corinna Michels, Pascal Burgmer, Thomas Mussweiler, Axel Ockenfels, and Wilhelm Hofmann. 2021. “Trust in Everyday Life.” Journal of Personality and Social Psychology 121:95–114. doi: 10.1037/pspi0000334.\n\n\nWilkinson, Richard G., and Kate Pickett. 2010. The Spirit Level: Why Greater Equality Makes Societies Stronger. New York: Bloomsbury Press.\n\n\nWu, Cary. 2021b. “Education and Social Trust in Global Perspective.” Sociological Perspectives 64(6):1166–86. doi: 10.1177/0731121421990045.\n\n\nWu, Cary. 2021a. “Education and Social Trust in Global Perspective.” Sociological Perspectives 64(6):1166–86. doi: 10.1177/0731121421990045."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "",
    "text": "ReadingsSoftwareTrainingHelp\n\n\n\nStatistics\nThe course does not strictly follow the content of a textbook, but the expectation is that students will read as much as possible of the assigned chapters from the following books:\n\n\n\n\n\n\n\n\nGelman, Andrew, Jennifer Hill, and Aki Vehtari. 2020. Regression and other stories. Cambridge: Cambridge University Press.  ROS\n\n\nFree to download PDF version from the book’s website: https://avehtari.github.io/ROS-Examples\n\n\n\n\n\n\n\nAlexander, Rohan. 2023. Telling Stories with Data. Chapman and Hall/CRC  TSD\n\n\nFree online book: https://tellingstorieswithdata.com\n\n\n\n\n\n\n\nGelman, A., and Hill, J. 2007. Data Analysis Using Regression and Multilevel/Hierarchical Models. Cambridge: Cambridge University Press.  ARM\n\n\nNote: ROS is the expanded and updated version of Part 1 (and some of Part 3) of this book. While everyone in the free world eagerly awaits the publication of ROS’s multilevel counterpart, we’ll use ARM as a reference work for the theory underpinning multilevel modelling.  Not freely available. Access it in print or online via the NU library\n\n\n\n\n\nRelatively large portions of text will be assigned for reading in each week from these books, referring to them by their acronyms. Don’t worry if you cannot read all the textbook content assigned in any given week! Those for whom the method covered by the assigned readings is new, will be able to refer back to them throughout the semester and beyond, reading thoroughly and completing the applied exercises. Those already familiar to some extent with the methods, should nonetheless read the text as a narrative and will discover hidden gems that will spectacularly improve their understanding and ability to interpret their statistical results.\n\n\nCoding\nThere will also be various readings relating more closely to the technicalities of coding in R and scientific writing, collaboration and communication in general. These readings will also be listed under each week’s outline as the semester progresses. The generic reading that students are advised to go through on their own is:\n\n\n\n\n\n\n\nWickham, Çetinkaya-Rundel and Grolemund. 2022. R for Data Science (2nd ed.)  R4DS\n\n\nFree online book: https://r4ds.hadley.nz/\n\n\n\n\n\n\nApplication articles\nIn the IT labs we will practice applying methods by reproducing small bits of published research, using the data and (critically) the modelling approaches used by the authors. To fully understand the context of these data and the methods used, you must read the original journal articles and the available supplementary materials provided alongside. These readings will be listed under each week’s outline (still work in progress!).\nThe articles come from a variety of different fields, so expect them to push you outside your disciplinary comfort zone. The point is to see how methods have been used in practice and learn how to reproduce (and potentially improve) those analyses. This will then enable you to apply this knowledge to your own research questions.\nWhen selecting the articles, the aim was to strike a fine balance between (a) the simplicity of the methods employed, (b) data and analytical transparency, and (c) the strength of the analysis. So don’t take them as examples of all-rounds best practice, but examples of research that gets published while being self-confident enough to open itself up for public scrutiny. Aim for this in your own research!\n\n\nOther readings\nFinally, there will also be recommended readings listed under certain weeks that help place methods, statistics and probability theory in a broader frame. These are useful readings for everyone, regardless of whether you will be applying quantitative analysis in your research or future work.\n\n\n\n\nRequired software\nWe will use a number of open-source software for data analysis and scientific writing. You need to install these on your personal computers to be able to work away from campus:\n\n\n\n\nR\n(programming language)\nEssential\nR needs to be installed even if we will only use it via the RStudio interface.\nInstall the latest version from here\n\n\n\nRStudio\n(integrated development environment)\nEssential\nYou will need the free desktop version appropriate for your operating system. RStudio combines the R Console - the direct interface to R - with a number of other panels.\nInstall the latest version from here\n\n\n\nTidyverse\n(collection of R packages)\nEssential\nThe tidyverse is a collection of packages that make the R language easier to use by introducing a more consistent grammar. It provides functions that are particularly useful for data manipulation and visualisation. It is the most common ‘dialect’ used among social scientists.\nInstall from within RStudio by executing in the Console:\ninstall.packages(\"tidyverse\")\n\n\n\nQuarto\n(scientific publishing system)\nEssential\nWe will be using Quarto markdown documents (.qmd) throughout the course to document our data analysis. .qmd files extend the plain-text Markdown mark-up language (.md) to allow for data analysis code to be executed and results presented alongside the main text. This is an essential requirement for analytical transparency, reliability and reproducibility.The assignment will also be completed in .qmd.\nIncluded by default in the latest RStudio release; no need to install separately.\nYou can check your installation by executing in the RStudio Terminal :\nquarto check\n\n\n\nZotero\n(reference manager)\nRecommended\nIf you are not yet using a reference manager, I recommend giving Zotero a try. It will make your work much more efficient and it integrates (relatively well) with RMarkdown and Quarto using the the Better BibTeX add-on.\nInstall the latest version and add-ons from here\n\n\n\n\n\n\nStudents with no previous experience using R and/or RStudio are advised to complete the self-paced free online training course R for Social Scientists provided by Data Carpentry at https://datacarpentry.org/r-socialsci/:\n\n\nThere are several Data Carpentry workshops run physically at Newcastle and these sessions can be booked at https://nclrse-training.github.io/Workshop-Webpage-Under-Construction/:\n\n\n\nThere are several ways to get help with  outside class. If you encounter an error message or are looking for a function to perform a specific task that we have not covered in class, you can do a Google search; for best results, use the https://rseek.org/ search engine, which limits the results to those relating to the  language.\nYou can also search for answers on Stack Overflow, which is a popular help and discussion website for programmers. You can also post a question there, but make sure to follow community standards and advice on how to ask a good question and how to provide a minimal reproducible example. You will need some experience using the site before being able to ask a good question, but it’s more than certain that any question you have at this stage has already been asked and answered somewhere. Make sure you do a comprehensive search with various prompts before thinking about asking your question.\nIncreasingly, large language model-based chatbots such as the (in)famous ChatGPT can also provide good answers. You can use them efficiently, but make sure to always test out the responses, in the overwhelming majority of the cases the advice they give is unreliable, at least at first try."
  },
  {
    "objectID": "plan.html",
    "href": "plan.html",
    "title": "HSS8005 {{< iconify line-md plus >}}",
    "section": "",
    "text": "Week\nTW\nDate\nTopic\nInfo\nNotes\nLecture\nLabs\nHandouts\n\n\n\n\n\n22\n27 January\nIntroduction  Module overview\n\n\n\n\n\n\n\nWeek 1\n22\n28 January\nTools  R, RStudio, Markdown, Quarto and other tools of the trade\n\n\n\n\n  \n\n\nWeek 2\n23\n04 February\nLines  Linear models and their limitations\n\n  \n\n  \n  \n\n\nWeek 3\n24\n11 February\nCurves  Logistic regression and other generalised linear models\n\n  \n\n  \n  \n\n\nWeek 4\n25\n18 February\nPaths  Graphical models and considerations for causal analysis\n\n  \n\n  \n  \n\n\nWeek 5\n26\n25 February\nInteractions  Estimating, plotting and interpreting interaction effects\n\n  \n\n  \n  \n\n\nWeek 6\n27\n03 March\nTemporalities  Panel, longitudinal and time-series analysis\n\n  \n\n  \n  \n\n\nWeek 7\n28\n10 March\nHierarchies  Hierarchical data structures and multilevel modelling\n\n  \n\n  \n  \n\n\nWeek 8\n29\n17 March\nDesigns  Simulation-based power analysis for study design\n\n  \n\n  \n  \n\n\n\n29\n20 March\nConclusions  Sum up, divide, and conquer"
  },
  {
    "objectID": "materials/notes/notes_w01.html",
    "href": "materials/notes/notes_w01.html",
    "title": "Week 1 Worksheet Notes",
    "section": "",
    "text": "By the end of the session, you will:\n\nunderstand how to use the most important panels in the RStudio interface\ncreate an RStudio Project to store your work throughout the course\nbegin using R scripts (.R) and Quarto notebooks (.qmd) to record and document your coding progress\nunderstand data types and basic operations in the R language\nunderstand the principles behind functions\nknow how to install, load and use functions from user-written packages\ngain familiarity with some useful functions from packages included in the {tidyverse} ecosystem.\n\nThis lab is an introduction to R and RStudio for the purposes of this module. Those new to R should also complete the R for Social Scientists online training course on their own (estimated to take around 5-6 hours), as well as read through the assigned chapters from the R4DS textbook.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#aims",
    "href": "materials/notes/notes_w01.html#aims",
    "title": "Week 1 Worksheet Notes",
    "section": "",
    "text": "By the end of the session, you will:\n\nunderstand how to use the most important panels in the RStudio interface\ncreate an RStudio Project to store your work throughout the course\nbegin using R scripts (.R) and Quarto notebooks (.qmd) to record and document your coding progress\nunderstand data types and basic operations in the R language\nunderstand the principles behind functions\nknow how to install, load and use functions from user-written packages\ngain familiarity with some useful functions from packages included in the {tidyverse} ecosystem.\n\nThis lab is an introduction to R and RStudio for the purposes of this module. Those new to R should also complete the R for Social Scientists online training course on their own (estimated to take around 5-6 hours), as well as read through the assigned chapters from the R4DS textbook.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#r-and-rstudio",
    "href": "materials/notes/notes_w01.html#r-and-rstudio",
    "title": "Week 1 Worksheet Notes",
    "section": "R and RStudio",
    "text": "R and RStudio\nTo install R and RStudio on your personal computers, follow the steps outlined here based on your operating system.\nAlthough you will only interact directly with RStudio in this module, R needs to be installed first.\nThink of the relationship between the two as that between the engine of a car (R) and the dashboard of a car (RStudio):\n\nOr perhaps imagine driving the car on the left vs. the one on the right:\n\n\n\n\n\n\n \n\n\n\n\nThe RStudio interface\nThe RStudio interface consists of four main panes (which can be customised to some degree):\n\nThe R Console Pane\nThe R Console, by default the left or lower-left pane in R Studio, is the home of the R “engine”. This is where the commands are actually run and non-graphic outputs and error/warning messages appear. The Console is the direct interface to the R software itself; it’s what we get if instead of RStudio we open the R software: a direct interface to the R programming language, where we can type commands and where results/messages are printed.\nYou can directly enter and run commands in the R Console, but realize that these commands are not saved as they are when running commands from a script. For this reason, we should not use the Console pane directly too much, ad reserve it only for quick and dirty calculations and checks. For typing commands that we want R to execute, we should instead use an R script file, where everything we type can be saved for later and complex analyses can be built up.\nThe Source Pane\nThis pane, by default in the upper-left, is a space to work with scripts and other text files. This pane is also where datasets (data frames) open up for viewing.\n\n\n\n\n\n\nNote\n\n\n\nIf your RStudio displays only one pane on the left, it is because you have no scripts open yet. We can open an existing one or create a new one. We’ll do that a bit later.\n\n\nThe Environment Pane\nThis pane, by default in the upper-right, is most often used to see brief summaries of “objects” that are available in an active session. Datasets loaded for analysis would appear here.\n\n\n\n\n\n\nNote\n\n\n\nIf your Environment is empty, it means that you don’t have any “objects” loaded or created yet. We will be creating some objects later and we will also import an example dataset.\n\n\nFiles, Plots, Packages, Help, etc. The lower-right pane includes several tabs including plots (display of graphics including maps), help, a file library, and available R packages (including installation/update options).\n\n\n\n\n\n\nTip\n\n\n\nYou can arrange the panes in various ways, depending on your preferences, using Tools &gt; Global Options in the top menu. So the arrangement of panes may look different on different computers.\n\n\n\n\nGeneral settings\nYou can personalise the look and feel of your RStudio setup in various ways using Tools &gt; Global Options from the top menu, but setting some options as default from the very start is highly recommended. You can see these in the pictures below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe most important setting in the picture on the left is the one to restore .RData at startup and saving the workspace as .RData on exit. Make sure these are un-ticked and set to ‘Never’, respectively, as shown in the picture. It’s always safer to start each RStudio session in a clean state, without anything automatically pre-loaded from a previous session. That could lead to serious and hard to trace complications.\nIn the picture on the right, you have the option to select that the new native pipe operator (|&gt;) (we’ll talk about it later!) be inserted using the Ctrl+Shift+M keyboard shortcut instead of the older version of the pipe (%&gt;%).\n\nThese settings will make more sense later, but it’s a good idea to have them sorted at the very beginning.\n\n\nScripts, markdown documents and projects\nWriting brief commands that you want to test out in the Console is okay, but what you really want is to save your commands as part of a workflow in a dedicated file that you can reuse, extend and share with others.\nIn every quantitative analysis, we need to ensure that each step in our analysis is traceable and reproducible. This is increasingly a professional standard expected of all data analysts in the social sciences. This means that we need to have an efficient way in which to share our analysis code, as well as our outputs and interpretations of our findings. RStudio has an efficient way of handling this requirement with the use of R script files and versions of the Markdown markup language that allow the efficient combining of plain text (as in the main body of an article) with analysis code and outputs produced in R. The table below lists the main characteristics of these file types:\n\n\n\nFormat\nExtension\nDescription\n\n\n\n\nR Script\n.R\nUse an R script if you want to document a large amount of code used for a particular analysis project. Scripts should contain working R commands and human-readable comments explaining the code. Commands can be run line-by-line, or the whole R script can be run at once. For example, one can write an R script containing a few hundred or thousands of lines of code that gathers and prepares raw, unruly data for analysis; if this script can run without any errors, then it can be saved and sourced from within another script that contains code that undertakes the analysis using the cleansed dataset. Comments can be added by appending them with a hashtag (#).\n\n\nR Markdown\n.Rmd\nMarkdown is a simple markup language that allows the formatting of plain text documents. R Markdown is a version of this language written by the R Studio team, which also allows for R code to be included. Plain text documents having the .Rmd extension and containing R Markdown-specific code can be “knitted” (exported) directly into published output document formats such as HTML, PDF or Microsoft Word, which contain both normal text as well as tables and charts produced with the embedded R code. The code itself can also be printed to the output documents.\n\n\nQuarto document\n.qmd\nQuarto is a newer version of R Markdown which allows better compatibility with other programming languages. It is a broader ecosystem design for academic publishing and communication (for example, the course website was built using quarto), but you will be using only Quarto documents in this module. There isn’t much difference between .Rmd and .qmd documents for their uses-cases on this module, so one could easily change and .Rmd extension to .qmd and still produce the same output. .qmd documents are “rendered” instead of “knitted”, but for RStudio users the underlying engine doing the conversion from Quarto/R Markdown to standard Markdown to output file (HTML, PDF, Word, etc.) is the same. Read more about Quarto document in the TSD textbook.\n\n\n\nCreating new files can be done easily via the options File &gt; New File &gt; from the top RStudio menu.\nThe best way to use these files are as part of R project folders, which allow for cross-references to documents and datasets to be made relative to the path of the project folder root. This makes sure that no absolute paths to files (i.e. things like “C:/Documents/Chris/my_article/data_files/my_dataset.rds”) need to be used (instead, you would write something like “~/data_files/my_dataset.rds” if the “my_article” folder was set up as an R Project). This allows for the same code file to be run on another computer too without an error, ensuring a minimal expected level of reproducibility in your workflow.\nSetting up an existing or a new folder as an R Project involves having a file with the extension .RProj saved in it. This can be done easily via the options File &gt; New Project from the top RStudio menu.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#r-data-types-and-structures",
    "href": "materials/notes/notes_w01.html#r-data-types-and-structures",
    "title": "Week 1 Worksheet Notes",
    "section": "R data types and structures",
    "text": "R data types and structures\nThe basic elements of data in R are called vectors. R has 6 basic data types that you should be aware of:\n\ncharacter: a text string, e.g. “name”\nnumeric: a real or decimal number\ninteger: non-decimal number; often represented by a number followed by the letter “L”, e.g. 5L\nlogical: TRUE or FALSE\ncomplex: complex numbers with real and imaginary parts\n\nR provides several functions to examine features of vectors and other objects, for example:\n\nclass() - what kind of object is it (high-level)?\ntypeof() - what is the object’s data type (low-level)?\nlength() - how long is it? What about two dimensional objects?\nattributes() - does it have any metadata?\n\nYou can explore some basic vector operations in Exercise 4 of the lab worksheet.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#data-frames",
    "href": "materials/notes/notes_w01.html#data-frames",
    "title": "Week 1 Worksheet Notes",
    "section": "Data frames",
    "text": "Data frames\nIt is useful to know about vectors, but we will use them primarily as part of larger data frames. Data frames are objects that contain several vectors of similar length. In a data frame each column is a variable and each row is a case. They look like spreadsheets containing data.\nThere are several toy data frames built into R, and we can have a look at one to see how it looks like. You can get a list of the available built-in datasets and their brief descriptions with the data() command.\nFor example, the mtcars data frame is built into R and so you can access it without loading any files. To get the dimensions, you can use dim(), nrow(), and ncol().\n\ndim(mtcars)\n\n[1] 32 11\n\nnrow(mtcars)\n\n[1] 32\n\nncol(mtcars)\n\n[1] 11\n\n\nWe can also load the dataset into our Environment and look at it manually:\n\nmtcars &lt;- mtcars\n\nThe new object has appeared in the Environment under a new section called Data. We can click on it and the dataset will open up in the Source pane. What do you think this dataset is about?\nYou can select each column/variable from the data frame use the $, turning it into a vector:\n\nmtcars$wt\n\n [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070\n[13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840\n[25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780\n\n\nYou can now treat this just like a vector, with the subsets and all.\n\nmtcars$wt[1]\n\n[1] 2.62\n\n\nWe can subset to the first/last k rows of a data frame\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\ntail(mtcars)\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\nThere are various ways in which one can further subset and wrangle vectors and data frames using base R functions, but the {tidyverse} and other user-written packages provide more functionality and ease of use. In this course, we will rely mostly on these.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#functions",
    "href": "materials/notes/notes_w01.html#functions",
    "title": "Week 1 Worksheet Notes",
    "section": "Functions",
    "text": "Functions\nMost of the work in R is done using functions. It’s possible to create your own functions. This makes R extremely powerful and extendible. We’re not going to cover making your own functions in this course, but it’s important to be aware of this capability. There are plenty of good resources online for learning how to do this, including this one.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#packages",
    "href": "materials/notes/notes_w01.html#packages",
    "title": "Week 1 Worksheet Notes",
    "section": "Packages",
    "text": "Packages\nInstead of programming your own functions in the R language, you can rely on functions written by other people and bundled within a package that performs some set task.\nWhen you install R, a set of “packages” containing various functions are also installed by default. These packages make up what is colloquially referred to as base R. Functions from these packages can be used straight away and they cannot be deleted or installed separately. The functionality of these base R packages is updated with each new edition of R, but not in between new releases of the software. The code below lists the names of all the packages in base R:\n\nnames(which(installed.packages()[ ,\"Priority\"] == \"base\", ))\n\n [1] \"base\"      \"compiler\"  \"datasets\"  \"graphics\"  \"grDevices\" \"grid\"     \n [7] \"methods\"   \"parallel\"  \"splines\"   \"stats\"     \"stats4\"    \"tcltk\"    \n[13] \"tools\"     \"utils\"    \n\n\nWe see in the list that there is also a package called “base”, which contains 1283 elementary functions. However, when we refer to base R, we usually mean the functions from all the 14 packages listed above.\nApart from these packages that come pre-installed and pre-loaded with our R installation, there are also a number of “recommended” packages, which can be thought of as an extended base R. These packages also come pre-installed in binary distributions of R, but they need to be loaded in order to make their functions available for use. These “recommended” packages are:\n\nnames(which(installed.packages()[ ,\"Priority\"] == \"recommended\", ))\n\n [1] \"lattice\"    \"MASS\"       \"Matrix\"     \"mgcv\"       \"nlme\"      \n [6] \"boot\"       \"class\"      \"cluster\"    \"codetools\"  \"foreign\"   \n[11] \"KernSmooth\" \"lattice\"    \"MASS\"       \"Matrix\"     \"mgcv\"      \n[16] \"nlme\"       \"nnet\"       \"rpart\"      \"spatial\"    \"survival\"  \n\n\nApart from these “recommended” packages, there is a great - and ever increasing - number of user-written packages that satisfy various programming needs. Some packages contain functions that are particularly useful for social scientists. Sometimes a number of packages that contain complementary functionality and are designed to work well together are brought under one meta-package, which allows for all those packages to be installed and loaded at once. The most popular such meta-package is the {tidyverse}, which includes such packages as {dplyr} (for data manipulation), {readr} (for reading in rectangular data like .csv files), {tidyr} (for cleaning datasets), {stringr} (for working with “strings”, that is, textual data), {forcats} (for managing “factors”, that is, categorical variables) or {ggplot2} (for data visualisation), among [several others](https://www.tidyverse.org/packages/.\nThe {tidyverse} packages have been developed around a coding philosophy that is very different from that of “base R”. It is sometimes referred to as a special “dialect” of the R language and has greatly contributed to popularising R and making it more easily available to practising social scientists who do not have a programming background, by designing code whose “grammar” is somewhat closer to that of “human” languages such as English. This is generally thought to lower the entry barriers to R for new users, although there isn’t a clear consensus on that.\nAnother recently developed meta-package, which was specifically designed with non-programmer social scientists in mind, is the {easystats} bundle. We will be relying on {easystats} packages quite a lot in this module, as they provide a very coherent set of functions that improve on the {tidyverse}.\nBoth of these meta-packages and thousands of other packages are available from the Comprehensive R Archive Network (CRAN). Many more packages are distributed as repositories on code-sharing platforms such as GitHub or R Universe.\nPackages made available on CRAN can be installed using the command install.packages(\"packagename\"). Once the package/library is installed (i.e. it is sitting somewhere on your computer), we can then load functions from that package using the :: operator (e.g. package::function()), or we can make all the functions from a package available by attaching that package with the library() function (e.g. library(package)).\nSo using a package/library is a two-stage process. We:\n\n **Install** the package/library onto your computer (from CRAN or another repository)\n2.a. Load functions from the package as you use them, or: 2.b. Attach the whole package to R’s search path, making all functions available to use by name\n\nLet’s start by installing the tidyverse meta-package, and then attach it:\n\ninstall.packages(\"tidyverse\")  ## this command installs packages from CRAN; note the quotation marks around the package name\n\nYou can check the suite of packages that are available when you attach the tidyverse library using a command from the tidyverse itself:\n\ntidyverse_packages()\n\n\nQuestion\nWhy do you think we got an error message when we tried to run the above command?\n\nBecause tidyverse_packages() is itself a function from the tidyverse, in order to use that function we need not only to install the tidyverse but also to make its functions available. In other words, we did not yet attach the tidyverse for use in our R session, we only just installed it on our computers.\nIf we don’t want to attach a package that we have downloaded - because maybe we only want to use a single function once and we don’t want to burden our computer’s memory, we can load explicitly given functions from a package in the following way:\n\ntidyverse::tidyverse_packages()  # Here we state the package followed by two colons, then followed by the function we want\n\nBut in many cases we do want to use several functions at various points in an analysis session, so it is often useful to attach the entire package or set of packages:\n\nlibrary(tidyverse)\n\nNow we can use functions from that package without having to explicitly state the name of the package. We can still state the name explicitly, and that may be useful for readers of our code to understand what package a function come from. Also, it may happen that different packages have similarly named functions, and if all those packages are attached, then the functions from a package attached later will override that in the package attached earlier. R will note in a comment whether any functions from a package are masked by another, so it’s worth paying attention to the comments and warnings printed by R when we attach packages.\n\nInstalling and attaching packages\nBoth install.packages() and library() are base R functions, but there are several other user-written packages that provide additional functionality to make it easier and more efficient to install, attach and manage packages. For example, the pacman package contains a function p_load() that allows us to attach several packages at once and install them from CRAN on the fly if they are not yet installed. The sister function p_load_gh() does the same for packages not published on CRAN but stored on personal repositories on GitHub. The {librarian} package does the same with the shelf() function, which installs missing packages from CRAN as well as GitHub.\nFor example, we can download and attach a number of packages in one go with the command below:\n\n# First, install {librarian} itself if not yet installed:\n\nif (!require(\"librarian\")) install.packages(\"librarian\") \n\nLoading required package: librarian\n\n# Then attach/install other packages using `librarian::shelf()`:\n\nlibrarian::shelf(\n  tidyverse,\n  easystats,\n  sjlabelled,\n  gtsummary,\n  ggformula\n  )\n\nThese are some useful packages that we will be using in this module. You can read more about the (meta)packages we have just installed here:\n\ntidyverse\neasystats\nsjlabelled\ngtsummary\nggformula",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/notes/notes_w01.html#about-the-tidyverse",
    "href": "materials/notes/notes_w01.html#about-the-tidyverse",
    "title": "Week 1 Worksheet Notes",
    "section": "About the Tidyverse",
    "text": "About the Tidyverse\n\nData frames and ‘tibbles’\nThe Tidyverse is built around the basic concept that data in a table should have one observation per row, one variable per column, and only one value per cell. Once data is in this ‘tidy’ format, it can be transformed, visualized and modelled for an analysis.\nWhen using functions in the Tidyverse ecosystem, most data is returned as a tibble object. Tibbles are very similar to the data.frames (which are the basic types of object storing datasets in base R) and it is perfectly fine to use Tidyverse functions on a data.frame object. Just be aware that in most cases, the Tidyverse function will transform your data into a tibble. If you are unobservant, you won’t even notice a difference. However, there are a few differences between the two data types, most of which are just designed to make your life easier. For more info, check R4DS.\n\n\nSelected dplyr functions\nThe dplyr package is designed to make it easier to manipulate flat (2-D) data (i.e. the type of datasets we are most likely to use, which are laid out as in a standard spreadsheet, with rows referring to cases (observations; respondents) and columns referring to variables. dplyr provides simple “verbs”, functions that correspond to the most common data manipulation tasks, to help you translate your thoughts into code. Here are some of the most common functions in dplyr:\n\nfilter() chooses rows based on column values.\narrange() changes the order of the rows.\nselect() changes whether or not a column is included.\nrename() changes the name of columns.\nmutate()/transmute() changes the values of columns and creates new columns (variables)\nsummarise() compute statistical summaries (e.g., computing the mean or the sum)\ngroup_by() group data into rows with the same values\nungroup() remove grouping information from data frame.\ndistinct() remove duplicate rows.\n\nAll these functions work similarly as follows:\n\nThe first argument is a data frame/tibble\nThe subsequent arguments are comma separated list of unquoted variable names and the specification of what you want to do\nThe result is a new data frame\n\nFor more info, check R for Social Scientists\nMost of the {dplyr} verbs perform tasks that can also be done in base R, but they provide more convenience. The table below lists a rough equivalence between dplyr and base R functionality:\n\n\n\n\n\n\n\ndplyr\nbase\n\n\n\n\narrange(df, x)\ndf[order(x), , drop = FALSE]\n\n\ndistinct(df, x)\ndf[!duplicated(x), , drop = FALSE], unique()\n\n\nfilter(df, x)\ndf[which(x), , drop = FALSE], subset()\n\n\nmutate(df, z = x + y)\ndf$z &lt;- df$x + df$y, transform()\n\n\npull(df, 1)\ndf[[1]]\n\n\npull(df, x)\ndf$x\n\n\nrename(df, y = x)\nnames(df)[names(df) == \"x\"] &lt;- \"y\"\n\n\nrelocate(df, y)\ndf[union(\"y\", names(df))]\n\n\nselect(df, x, y)\ndf[c(\"x\", \"y\")], subset()\n\n\nselect(df, starts_with(\"x\"))\ndf[grepl(\"^x\", names(df))]\n\n\nsummarise(df, mean(x))\nmean(df$x), tapply(), aggregate(), by()\n\n\nslice(df, c(1, 2, 5))\ndf[c(1, 2, 5), , drop = FALSE]\n\n\n\nThe above functions allow us to manage single data-frames. A set of other functions (sometimes called “two-table verbs”) make it possible to combine columns, rows, or both, from two or more data-frames. In base-R, much of this can be achieved with the merge() function, while in dplyr the join() function makes this possible, extending some further functionality that is not easily available in base-R. The table below lists these dplyr functions and their base-R equivalents:\n\n\n\ndplyr\nbase\n\n\n\n\ninner_join(df1, df2)\nmerge(df1, df2)\n\n\nleft_join(df1, df2)\nmerge(df1, df2, all.x = TRUE)\n\n\nright_join(df1, df2)\nmerge(df1, df2, all.y = TRUE)\n\n\nfull_join(df1, df2)\nmerge(df1, df2, all = TRUE)\n\n\nsemi_join(df1, df2)\ndf1[df1$x %in% df2$x, , drop = FALSE]\n\n\nanti_join(df1, df2)\ndf1[!df1$x %in% df2$x, , drop = FALSE]\n\n\n\n\n\nThe forward-pipe (%&gt;%/|&gt;) workflow\nAll of the dplyr functions take a data frame or tibble as the first argument. Rather than forcing the user to either save intermediate objects or nest functions, dplyr provides the forward-pipe operator %&gt;% from the magrittr package. This operator allows us to combine multiple operations into a single sequential chain of actions. As of R 4.1.0 there is also a native pipe operator in R (|&gt;), and in RStudio one can set the shortcut to paste the new pipe operator instead (as we have done at the beginning of the lab). Going forward, we’ll use this version of the pipe operator for simplicity, but it’s likely that you will encounter the older version of the operator too in various scripts.\nLet’s start with a hypothetical example. Say you would like to perform a sequence of operations on data frame x using hypothetical functions f(), g(), and h():\n\nTake x then\nUse x as an input to a function f() then\nUse the output of f(x) as an input to a function g() then\nUse the output of g(f(x)) as an input to a function h()\n\nOne way to achieve this sequence of operations is by using nesting parentheses as follows:\nh(g(f(x)))\nThis code isn’t so hard to read since we are applying only three functions: f(), then g(), then h() and each of the functions is short in its name. Further, each of these functions also only has one argument. However, you can imagine that this will get progressively harder to read as the number of functions applied in your sequence increases and the arguments in each function increase as well. This is where the pipe operator |&gt; comes in handy. |&gt; takes the output of one function and then “pipes” it to be the input of the next function. Furthermore, a helpful trick is to read |&gt; as “then” or “and then.” For example, you can obtain the same output as the hypothetical sequence of functions as follows:\nx |&gt; \n  f() |&gt; \n  g() |&gt; \n  h()\nYou would read this sequence as:\n\nTake x then\nUse this output as the input to the next function f() then\nUse this output as the input to the next function g() then\nUse this output as the input to the next function h()\n\nSo while both approaches achieve the same goal, the latter is much more human-readable because you can clearly read the sequence of operations line-by-line. Instead of typing out the three strange characters of the operator, one can use the keyboard shortcut Ctrl + Shift + M (Windows) or Cmd + Shift + M (MacOS) to paste the operator.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Notes"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html",
    "href": "materials/worksheets/worksheets_w01.html",
    "title": "Week 1 Lab Exercises",
    "section": "",
    "text": "By the end of the session, you will:\n\nunderstand how to use the most important panels in the RStudio interface\ncreate an RStudio Project to store your work throughout the course\nbegin using R scripts (.R) and Quarto notebooks (.qmd) to record and document your coding progress\nunderstand data types and basic operations in the R language\nunderstand the principles behind functions\n\nknow how to install, load and use functions from user-written packages\ngain familiarity with some useful functions from packages included in the tidyverse ecosystem",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#aims",
    "href": "materials/worksheets/worksheets_w01.html#aims",
    "title": "Week 1 Lab Exercises",
    "section": "",
    "text": "By the end of the session, you will:\n\nunderstand how to use the most important panels in the RStudio interface\ncreate an RStudio Project to store your work throughout the course\nbegin using R scripts (.R) and Quarto notebooks (.qmd) to record and document your coding progress\nunderstand data types and basic operations in the R language\nunderstand the principles behind functions\n\nknow how to install, load and use functions from user-written packages\ngain familiarity with some useful functions from packages included in the tidyverse ecosystem",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-1-install-r-and-rstudio-and-perform-basic-settings",
    "href": "materials/worksheets/worksheets_w01.html#exercise-1-install-r-and-rstudio-and-perform-basic-settings",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 1: Install R and RStudio, and perform basic settings",
    "text": "Exercise 1: Install R and RStudio, and perform basic settings\nTo install R and RStudio on your personal computers, follow the steps outlined here based on your operating system.\nAlthough you will only interact directly with RStudio in this module, R needs to be installed first so that RStudio can detect it and connect to it.\nOnce installed, open RStudio and explore its panes.\nMake the following changes to the RStudio settings in the Global options:\n\nset RStudio to never save your workspace as .RData upon exiting;\nset RStudio to insert the native “pipe operator” when typing the Ctrl+Shift+M keyboard shortcut.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#advanced-user-exercise-leap-year-functions",
    "href": "materials/worksheets/worksheets_w01.html#advanced-user-exercise-leap-year-functions",
    "title": "Week 1 Lab Exercises",
    "section": "Advanced user exercise: leap year functions",
    "text": "Advanced user exercise: leap year functions\n\nIf you have more advanced knowledge of R, here’s and exercise for you.\nSuppose you want to write a function that lists all the leap years between two specified years. How would you go about writing it? What are the information that you need first? What are the steps that you would take to build up the function? There are several ways of achieving such a function, and you can find three options at the bottom of this worksheet. Work individually or in a small group.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nYou first need to check the definition of a leap year and how it is calculated (Google?)\nAsk R to tell you what the “%%” operator does. You can ask R for help using the help() function or ?....\nWhen you are done, you can check your results against the example solutions given at the bottom of this worksheet.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-2-use-r-as-a-simple-calculator",
    "href": "materials/worksheets/worksheets_w01.html#exercise-2-use-r-as-a-simple-calculator",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 2: Use R as a simple calculator",
    "text": "Exercise 2: Use R as a simple calculator\nThe most elementary yet still handy task you can use R for is to perform basic arithmetic operations. This is useful for getting a first experience doing things in the R language.\nLet’s have a look at a few operations using the Console directly. Let’s say we want to know the result of adding up three numbers: 1, 3 and 5. In the Console pane, type the command below and then click Enter:\n\n1 + 3 + 5\n\nThis will print out the result (9) in the Console:\n\n\n[1] 9\n\n\nThe [1] in the result is just the line number; in this case, our result only consists of a single line.\nWe can also save the result of this operation as an object, so we can use it for further operations. We create objects by using the so-called assignment operator consisting of the characters &lt;-.\nA command involving &lt;- can be read as “assign the value of the result from the operation on the right hand side (some expression) to the object on the left hand side (short name of object, single word, with no spaces)”.\nFor example, let’s save our result in an object called “nine”:\n\nnine &lt;- 1 + 3 + 5\n\nNotice that there is no output printed in the Console this time. But there are also no error messages, so the operation must have run without problems. Instead, if we look at the Environment pane, we notice that it is no longer empty, but contains an object called “nine” that stores the value “9” in it. We can now use this object for other operations, such as:\n\nnine - 3\nnine + 15\nnine / 3\nnine * 9\n\nWe see the results of these operations printed out in the Console.\nWe can also check results of so-called relational operations. There are several relational operators that allow us to compare objects in R. The most useful of these are the following:\n\n\n&gt; greater than, &gt;= greater than or equal to\n\n&lt; less than, &lt;= less than or equal to\n\n== equal to\n\n!= not equal to\n\nWhen we use these to compare two objects in R, we end up with a logical object.\nFor example, let’s check whether 9 is greater than 5, and whether it is lower than 8:\n\n9 &gt; 5\n9 &lt; 8\n\nR treats our inputs as statements that we are asking it to evaluate, and we get the answers “TRUE” and “FALSE”, respectively, as we would expect. Let’s now check whether our object “nine” is equal to the number 9. We may assume that we can achieve this by typing “nine = 9”, but let’s see what that results in:\n\nnine = 9\n\nDid we get the result we expected? Nothing was printed in the output, so seemingly nothing happened… That’s because the “=” sign is also used as an assignment operator in R, just like “&lt;-”. So we basically assigned the value “9” to the object “nine” again. To use the equal sign as a logical operator we must type it twice (==). Let’s see:\n\nnine == 9\n\nNow we get the answer “TRUE”, as expected.\nThis distinction between “=” and “==” is important to keep in mind. What would have happened if we had tried to test whether our object “nine” equals value “5” or not, and instead of the logical operator (==) we used the assignment operator (=)? Let’s see:\n\nnine = 5\n\nIn the Console we again see no results printed, but if we check our Environment, we see that the value of the object “nine” was changed to 5. So it can be a dangerous business. We’ll be using the “&lt;-” as assignment operator instead of “=” to avoid any confusion in this respect. The distinction between == and = will also emerge in other contexts later.\nSo, try out the following commands in turn now and check if the results are what you’d expect:\n\nnine == 9\nnine == 5\nfive &lt;- 9\nnine == five\nfive = nine\nnine == five\nnine + five &lt;= 10 # lower than or equal to ...\n\nThe text following the hashtag (#) in the last line is a comment. If you’d like to comment on any code you write just add a hash (#) or series of hashes in front of it so that R knows it should not evaluate it as a command. This will be useful when writing your commands in an R script that you can save for later, rather than interacting with R live in the Console.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-3-create-an-rstudio-project-containing-a-.r-and-a-.qmd-file",
    "href": "materials/worksheets/worksheets_w01.html#exercise-3-create-an-rstudio-project-containing-a-.r-and-a-.qmd-file",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 3: Create an RStudio Project containing a .R and a .qmd file",
    "text": "Exercise 3: Create an RStudio Project containing a .R and a .qmd file\n\nCreate a new folder set up as an R project; call the folder “HSS8005_labs”; when done, you should have an empty folder with a file called “HSS8005_labs.Rproj” in it\nCreate a new R script (.R); once created, save it as “Lab_1.R” within the “HSS8005_labs” folder\nCreate a new Quarto document (.qmd); once created, save it as “Lab_1.qmd” within the “HSS8005_labs” folder\n\nYou will work in each of these new documents in this lab to gain experience with them.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-4-vector-operations",
    "href": "materials/worksheets/worksheets_w01.html#exercise-4-vector-operations",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 4: Vector operations",
    "text": "Exercise 4: Vector operations\nLet’s learn a few vector operations. Type/copy the code below to the R script file your created earlier (“Lab_1.R”), and save it at the end for your records.\nFirst, let’s use the c() function to concatenate vector elements:\n\nx &lt;- c(2.2, 6.2, 1.2, 5.5, 20.1)\n\nTo run this line of code in an R script, place the cursor on the line you want to execute and either click on the small “Run” tab in the upper-right corner of the script’s task bar, or click Ctrl+Enter (on Windows PCs).\nThe vector called x that we just created appears in the Environment. We can examine some of its features:\n\nclass(x)\ntypeof(x)\nlength(x)\nattributes(x)\n\nThese tell us something about the characteristics of the object, but not much about its content (apart from the fact that it has a length of 5). Functions such as min, max, range, mean, median, sum or summary give us some summary statistics about the object:\n\nmin(x)\nmax(x)\nrange(x)\nmean(x)\nmedian(x)\nsum(x)\nsummary(x)\n\nThe seq() function lets us create a sequence from a starting point to an ending point. If you specify the by argument, you can skip values. For instance, if we wanted a vector of every 5th number between 0 and 100, we could write:\n\nnumbers &lt;- seq(from = 0, to = 100, by = 5)\n\nTo print out the result in the console, we can simply type the name of the object:\n\nnumbers\n\nA shorthand version to get a sequence between two numbers counting by 1s is to use the : sign. For example, print out all the numbers between 200 and 250:\n\n200:250\n\nTo access a single element of a vector by position in the vector, use the square brackets []:\n\nx[2]\n\nIf you want to access more than one element of a vector, put a vector of the positions you want to access in the brackets:\n\nx[c(2, 5)]\n\nIf you try to access an element past the length of the vector, it will return a missing value NA:\n\nx[10]\n\nIf you accidentally subset a vector by NA (the missing value), you get the vector back with all its entries replaced by NA:\n\nx[NA]\n\nLet’s say you want to modify one value in your vector. You can combine the square bracket subset [] with the assignment operator &lt;- to replace a particular value:\n\nx\nx[3] &lt;- 50.3\nx\n\nYou can replace multiple values at the same time by using a vector for subsetting:\n\nx\nx[1:2] &lt;- c(-1.3, 42)\nx\n\nIf the replacement vector (the right-hand side) is shorter than what you are assigning to (the left-hand side), the values will “recycle” or repeat as necessary:\n\nx[1:2] &lt;- 3.2\nx\n\nx[1:4] &lt;- c(1.2, 2.4)\nx\n\nYou can also create a vector of characters (words, letters, punctuation, etc):\n\njedi &lt;- c(\"Yoda\", \"Obi-Wan\", \"Luke\", \"Leia\", \"Rey\")\n\nNote for vectors, you cannot mix characters and numbers in the same vector. If you add a single character element, the whole vector gets converted.\n\n### output is numeric\nx\n\n### output is now character\nc(x, \"hey\")\n\nLogical vectors are just vectors that only contain the special R values TRUE or FALSE.\n\nlogical &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\nlogical\n\nYou could but never should shorten TRUE to T and FALSE to F. It’s easy for this shortening to go wrong so better just to spell out the full word. Also not that this is case-sensitive, and this will produce an error:\n\ntrue\nTrue\nfalse",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-5-data-frame-operations-on-built-in-datasets",
    "href": "materials/worksheets/worksheets_w01.html#exercise-5-data-frame-operations-on-built-in-datasets",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 5: Data-frame operations on built-in datasets",
    "text": "Exercise 5: Data-frame operations on built-in datasets\nThere are several toy data frames built into R, and we can have a look at one to see how it looks like.\n\nUse the data() command to get a list of available built-in datasets;\nChoose one of the available datasets and import it into the Rstudio Environment\nOpen the dataset in the Viewer to quickly inspect it visually\nCheck the following using the appropriate R functions:\n\nHow many cases (rows) are in the dataset?\nHow many variables (columns) are in the dataset?\nWhat is the type of the first variables in the dataset?\nPrint the first few and last few entries in the dataset.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-6-install-and-load-r-packages",
    "href": "materials/worksheets/worksheets_w01.html#exercise-6-install-and-load-r-packages",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 6: Install and load R packages",
    "text": "Exercise 6: Install and load R packages\nInstall and load the following R packages:\n\ntidyverse\neasystats\ngtsummary\nggformula\n\nSpend a bit of time reading about these packages on their website documentation.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  },
  {
    "objectID": "materials/worksheets/worksheets_w01.html#exercise-6-data-frame-operations-in-a-quarto-document",
    "href": "materials/worksheets/worksheets_w01.html#exercise-6-data-frame-operations-in-a-quarto-document",
    "title": "Week 1 Lab Exercises",
    "section": "Exercise 6: Data frame operations in a Quarto document",
    "text": "Exercise 6: Data frame operations in a Quarto document\nIn this task, let’s start using the other document we created, the .qmd file. This file format allows you to combine both longer written text (such as detailed descriptions of your data analysis process or the main body of a report or journal article) with code chunks. To get you started using this file format, read Chapter 3.2. in TSD. Below we will focus only on the code chunks.\nCompared to what you have done in the R script, in the main Quarto document a # refers to a heading level rather than a comment. If you want to include a code chunk, you can click on the +C tab in the upper-right corner of the .qmd document’s toolbar, or use the keyboard shortcut Ctrl+Alt+i. In the code chunk you would write in the same way as you did in the R script (they are basically mini-scripts). Within a code-chunk, therefore, the # still refers to a comment.\nTo execute a command withing a code chunk, you can either run each line/selection separately using Ctrl+Enter as in the R script, or you can run the entire content of the chunk with the green right-pointing triangle-arrow in the upper-right corner of the chunk.\nLet’s continue doing some operations on the mtcars dataset we looked at earlier, this time using some useful tidyverse functions.\nLet’s subset the data frame by selecting certain rows or columns. In tidyverse, you can do this with the filter() function for selecting rows and the select() function for selecting columns. Here we pipe the selections into head() to show the first few rows. You could also use the dplyr::slice_head function\n\nmtcars |&gt;\n  select(mpg, wt) |&gt;\n  head()\n\nTo select the cars with eight cylinders:\n\nmtcars |&gt;\n  filter(cyl == 8)\n\nWe can use the slice() function. For example, to get the 5th through 10th rows:\n\nmtcars |&gt;\n  slice(5:10)\n\nIf we pass a vector of integers to the select function, we will get the variables corresponding to those column positions. So to get the first through third columns:\n\nmtcars |&gt;\n  select(1:3) |&gt;\n  head()\n\nIf you call summary() a data frame, it produces applies the vector version of the summary command to each column:\n\nsummary(mtcars)\n\nThese few tasks should be enough to get you started with R and RStudio.\nIf this was your first encounter with R, you can complete the R for Social Scientists online training too sometime during the week.\nFrom next week we will begin working actively with real data and address specific data management challenges that arise from there.\nThose of you who have worked on the advanced user exercise can check some optional solutions below.\n\n\n\n\n\n\nSolutions to the advanced exercise: leap year functions\n\n\n\n\n\nFirst, we need to make sure that we have a definition of a leap year. We can go for this one, from the Royal Museums of Greenwich:\n\nTo be a leap year, the year number must be divisible by four – except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not.\n\nSo, we need to write a function that calculates whether a given number is divisible by another or not. We still need to simplify this further conceptually. If a number is divisible by another, that means that there is no ‘remainder’, or in other words, that the ‘remainder’ is 0. Is there a mathematical operation that could come in handy here? We may remember that the modulo operation gives the remainder when dividing. For example, “5 modulo 3 = 2” because \\({5\\over3}=1\\) with a remainder of \\(2\\).\nKnowing this will be extremely helpful, but we also need to know how the modulo operation is implemented in the R programming language. We could do a search in R for ?Arithmetic to find a list of arithmetic operators, and we’d find that the operator %% stands for the modulo operation.\nWe now have all the knowledge elements we need to get down to programming a leap-year function in R:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Materials",
      "Week 1",
      "Exercises"
    ]
  }
]